/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jobits.pos.ui.utils;

import com.jobits.pos.logs.RestManagerHandler;
import com.jobits.pos.recursos.R;
import com.jobits.pos.ui.DefaultValues;
import com.jobits.ui.components.MaterialComponentsFactory;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Home
 */
public class ImageManager extends javax.swing.JDialog {

//    private static final String MEDIA_PATH = "Media/Productos";
    PanelDibujo pd;
    String nombreArchivo = "";
    String newFileName;

    /**
     * Creates new form ImageEditor
     *
     * @param parent
     */
    public ImageManager(java.awt.Frame parent) {
        super(parent, true);
        init();

    }

    public void init() {
        setUndecorated(true);
        initComponents();
        setLocationRelativeTo(null);
        ComponentMover cr = new ComponentMover(this, this);
    }

    public void showView(String newFileName, ImageIcon image) {
        this.newFileName = newFileName;
        jLabel1.setText(newFileName);
        jLabelOldImage.setIcon(image);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = MaterialComponentsFactory.Containers.getPrimaryPanel();
        jButtonSave1 = MaterialComponentsFactory.Buttons.getOutlinedButton();
        jLabel1 = new javax.swing.JLabel();
        jPanelImageViewer = new javax.swing.JPanel();
        jLabelOldImage = new javax.swing.JLabel();
        jPanel2 = MaterialComponentsFactory.Containers.getPrimaryPanel();
        jButtonOpen = MaterialComponentsFactory.Buttons.getOutlinedButton();
        jButtonCrop = MaterialComponentsFactory.Buttons.getOutlinedButton();
        jButtonSave = MaterialComponentsFactory.Buttons.getOutlinedButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 620));
        setResizable(false);

        jPanel1.setBorder(new javax.swing.border.LineBorder(DefaultValues.SECONDARY_DARK, 2, true));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(100, 60));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jButtonSave1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/icons pack/cerrar_indigo.png"))); // NOI18N
        jButtonSave1.setPreferredSize(new java.awt.Dimension(50, 50));
        jButtonSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSave1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonSave1, java.awt.BorderLayout.EAST);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<Producto de Venta>");
        jPanel3.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanelImageViewer.setPreferredSize(new java.awt.Dimension(500, 500));
        jPanelImageViewer.setLayout(new java.awt.BorderLayout());

        jLabelOldImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanelImageViewer.add(jLabelOldImage, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanelImageViewer, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 40, 5));

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/icons pack/abrir_indigo.png"))); // NOI18N
        jButtonOpen.setToolTipText("Abrir");
        jButtonOpen.setPreferredSize(new java.awt.Dimension(50, 50));
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonOpen);

        jButtonCrop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/icons pack/recortar_indigo.png"))); // NOI18N
        jButtonCrop.setToolTipText("Recortar");
        jButtonCrop.setPreferredSize(new java.awt.Dimension(50, 50));
        jButtonCrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCropActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonCrop);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/icons pack/guardar_indigo.png"))); // NOI18N
        jButtonSave.setToolTipText("Guardar");
        jButtonSave.setPreferredSize(new java.awt.Dimension(50, 50));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonSave);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        onOpenClick();// TODO add your handling code here:
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSave1ActionPerformed
        dispose(); // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSave1ActionPerformed

    private void jButtonCropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCropActionPerformed
        onCropClick(); // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCropActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        onSaveClick();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCrop;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSave1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelOldImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelImageViewer;
    // End of variables declaration//GEN-END:variables

    private void onOpenClick() {
        JFileChooser selector = new JFileChooser();
        selector.setFileFilter(new FileNameExtensionFilter("Imagenes", "jpg", "png"));
        int resultado = selector.showOpenDialog(null);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                nombreArchivo = selector.getSelectedFile().getName();
                BufferedImage image = ImageIO.read(selector.getSelectedFile());
                int xImageViewer = jPanelImageViewer.getWidth();
                int yImageViewer = jPanelImageViewer.getHeight();
                if (image.getWidth() > xImageViewer && image.getHeight() > yImageViewer) {
                    image = resizeImage(image, xImageViewer, yImageViewer);
                }
                dragImage(image);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

    private void onCropClick() {
        if (pd != null) {
            BufferedImage image = pd.recortar_imagen();
            if (image != null) {
                dragImage(image);
            }
        }

    }

    private void onSaveClick() {
        if (pd != null) {
            pd.guardar_imagen(nombreArchivo);
        }
    }

    class PanelDibujo extends JPanel implements MouseMotionListener, MouseListener {

        java.awt.Image img;
        BufferedImage Imagmemoria;
//        BufferedImage imgrecortada;

        Graphics2D g2D;

        float x = 0;
        float y = 0;
        float ancho = 0;
        float alto = 0;

        public PanelDibujo(BufferedImage f) {
            this.img = f;
            this.setSize(f.getWidth(), f.getHeight());
            this.setVisible(true);
            addMouseMotionListener(this);
            addMouseListener(this);
        }

        public BufferedImage getImagmemoria() {
            return Imagmemoria;
        }

        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            if (img != null) {
                Imagmemoria = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
                g2D = Imagmemoria.createGraphics();
                g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2D.drawImage(img, 0, 0, img.getWidth(this), img.getHeight(this), this);
                g2D.setStroke(new BasicStroke(2f));
                g2D.setColor(Color.WHITE);
                Rectangle2D r2 = new Rectangle2D.Float(x, y, ancho, alto);
                g2D.draw(r2);
                g2.drawImage(Imagmemoria, 0, 0, this);
            }
        }

        public void guardar_imagen(String nombrearchivo) {
            try {
                File mediaFolder = new File(R.mediaFilePath);
                if (!mediaFolder.exists()) {
                    mediaFolder.mkdirs();
                }
                File mediaFile = new File(R.mediaFilePath + newFileName + ".jpg");
                if (!mediaFile.exists()) {
                    mediaFile.createNewFile();
                }
                if (mediaFile.exists()) {
                    mediaFile.delete();
                }
                try {
                    if (Imagmemoria != null) {
                        ImageIO.write(Imagmemoria, "jpg", mediaFile);
                        JOptionPane.showMessageDialog(null, "Se ha guardado Correctamente la imagen recortada");
                    } else {
                        JOptionPane.showMessageDialog(null, "Seleccione una imagen primero");
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error, Trate nuevamente");
                }

            } catch (IOException ex) {
                Logger.getLogger(RestManagerHandler.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        public BufferedImage recortar_imagen() {
            if (x == 0 && y == 0 && ancho == 0 && alto == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione el arrea a recortar primero");
            } else {
                Imagmemoria = ((BufferedImage) img).getSubimage((int) x, (int) y, (int) ancho, (int) alto);
            }
            return Imagmemoria;
        }

        @Override
        public void mouseDragged(java.awt.event.MouseEvent e) {
            ancho = e.getX() - x;
            alto = ancho;
//            alto = e.getY() - y;
            if (ancho < 0) {
                ancho = 0;
            }
            if (alto < 0) {
                alto = 0;
            }
            if (x > this.getWidth()) {
                x = this.getWidth() - ancho;
            }
            if (y > this.getHeight()) {
                y = this.getHeight() - alto;
            }
            this.repaint();
        }

        @Override
        public void mouseMoved(java.awt.event.MouseEvent e) {
        }

        @Override
        public void mouseClicked(java.awt.event.MouseEvent e) {
        }

        @Override
        public void mousePressed(java.awt.event.MouseEvent e) {
            x = e.getX();
            y = e.getY();
        }

        @Override
        public void mouseReleased(java.awt.event.MouseEvent e) {
        }

        @Override
        public void mouseEntered(java.awt.event.MouseEvent e) {
        }

        @Override
        public void mouseExited(java.awt.event.MouseEvent e) {
        }
    }

    public static BufferedImage resizeImage(BufferedImage originalImage, int boundWidth, int boundHeight) throws IOException {
        int imageWidth = originalImage.getWidth();
        int imageHeight = originalImage.getHeight();
        float percentReduction = 1.00f;
        if (imageWidth > imageHeight) {
            while (imageWidth > boundWidth) {
                imageWidth *= percentReduction;
                imageHeight *= percentReduction;
                percentReduction -= 0.01f;
            }
        } else if (imageWidth < imageHeight) {
            while (imageHeight > boundHeight) {
                imageWidth *= percentReduction;
                imageHeight *= percentReduction;
                percentReduction -= 0.01f;
            }
        }
        BufferedImage resizedImage = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics2D = resizedImage.createGraphics();
        graphics2D.drawImage(originalImage, 0, 0, imageWidth, imageHeight, null);
        graphics2D.dispose();
        return resizedImage;
    }

    private void dragImage(BufferedImage image) {
        pd = new PanelDibujo(image);
        int x = (jPanelImageViewer.getWidth() - image.getWidth(null)) / 2;
        int y = (jPanelImageViewer.getHeight() - image.getHeight(null)) / 2;
        pd.setLocation(x, y);
        pd.repaint();
        repaint();
        if (jPanelImageViewer.getComponentCount() > 0) {
            jPanelImageViewer.removeAll();
        }
        jPanelImageViewer.add(pd);
    }

    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();
        return bimage;
    }

    public static ImageIcon loadImageIcon(String keyWord, Dimension d) {
        ImageIcon icono = null;
        try {
            String path = R.mediaFilePath + keyWord + ".jpg";
            if (new File(path).exists()) {
                System.out.println(d.getHeight() + "-" + d.getWidth());
                BufferedImage bi = ImageIO.read(new File(path));
                Image img = bi.getScaledInstance((int) d.getWidth(), (int) d.getHeight(), Image.SCALE_SMOOTH);
                icono = new ImageIcon(img);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return icono;
    }
//
//    public static BufferedImage loadBufferedImage(String keyWord) {
//        BufferedImage image = null;
//        try {
//            File f = new File(R.mediaFilePath + keyWord + ".jpg");
//            if (f.exists()) {
//                image = ImageIO.read(f);
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(ImageManager.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return image;
//    }
}

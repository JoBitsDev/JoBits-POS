/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jobits.pos.ui.almacen;

import com.jobits.pos.ui.OldAbstractView;
import com.jobits.pos.ui.utils.OldAbstractCrossReferenePanel;
import com.jobits.pos.ui.utils.LongProcessAction;
import com.jobits.pos.ui.utils.RestManagerCellRender;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.print.PrinterException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import com.jobits.pos.controller.AbstractDialogController;
import com.jobits.pos.controller.almacen.IPVController;
import com.jobits.pos.exceptions.DevelopingOperationException;
import com.jobits.pos.domain.models.Cocina;
import com.jobits.pos.domain.models.Insumo;
import com.jobits.pos.domain.models.Ipv;
import com.jobits.pos.domain.models.IpvPK;
import com.jobits.pos.domain.models.IpvRegistro;
import com.jobits.pos.domain.models.IpvVentaRegistro;
import com.jobits.pos.servicios.impresion.ComponentPrinter;
import com.jobits.pos.servicios.impresion.Impresion;
import com.jobits.pos.recursos.R;
import com.jobits.pos.ui.utils.RestManagerAbstractTableModel;
import com.jobits.pos.ui.utils.RestManagerComboBoxModel;
import com.jobits.pos.ui.utils.RestManagerListModel;
import com.jobits.pos.ui.utils.utils;

/**
 *
 * @author Jorge
 */
public class IpvGestionView extends OldAbstractView {

    private Cocina currentSelectedKitchen;
    private List<IpvRegistro> registroList;
    private List<IpvVentaRegistro> ipvList;

    public IpvGestionView(OldAbstractView parent, AbstractDialogController controller) {
        super(DialogType.FULL_SCREEN, controller, parent);
        initComponents();
        fetchComponentData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanelRegistros = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRegistro = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jPanelIPV = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableIPV = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButtonPedido = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanelOptions = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonRefrescar = new com.jidesoft.swing.JideButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        jPanelRegistros.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTableRegistro.setAutoCreateRowSorter(true);
        jTableRegistro.setFont(new java.awt.Font("Lucida Grande", 0, 22)); // NOI18N
        jTableRegistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableRegistro.setRowHeight(25);
        jTableRegistro.setRowMargin(4);
        jScrollPane2.setViewportView(jTableRegistro);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanelRegistros.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(new org.pushingpixels.lafwidget.utils.ShadowPopupBorder());
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/impresora.png"))); // NOI18N
        jButton4.setMnemonic('i');
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings"); // NOI18N
        jButton4.setText(bundle.getString("label_imprimir")); // NOI18N
        jButton4.setToolTipText("Imprimir");
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/agregar_circular.png"))); // NOI18N
        jButton2.setMnemonic('e');
        jButton2.setToolTipText(bundle.getString("label_dar_entada")); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/analitica.png"))); // NOI18N
        jButton3.setMnemonic('a');
        jButton3.setToolTipText(bundle.getString("label_ajustar_consumo")); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jPanelRegistros.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jCheckBox1.setText(bundle.getString("label_ocultar_insumos_no_utilizados")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox1, java.awt.BorderLayout.WEST);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Fecha");
        jPanel4.add(jLabel3, java.awt.BorderLayout.CENTER);

        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });
        jPanel4.add(jDateChooser2, java.awt.BorderLayout.EAST);

        jPanelRegistros.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jTabbedPane2.addTab("Registros Existencias", new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/registro_lapiz.png")), jPanelRegistros, "Ver los registros de IPvs"); // NOI18N

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanelIPV.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTableIPV.setAutoCreateRowSorter(true);
        jTableIPV.setFont(new java.awt.Font("Lucida Grande", 0, 22)); // NOI18N
        jTableIPV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto Venta", "Inicio", "Entrada", "Disponible", "Autorizo", "Venta", "Precio Venta", "Importe", "Final"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableIPV.setRowHeight(35);
        jTableIPV.setRowMargin(5);
        jScrollPane4.setViewportView(jTableIPV);

        jPanel5.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanelIPV.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(new org.pushingpixels.lafwidget.utils.ShadowPopupBorder());
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/impresora.png"))); // NOI18N
        jButton5.setMnemonic('i');
        jButton5.setText(bundle.getString("label_imprimir")); // NOI18N
        jButton5.setToolTipText("Imprimir");
        jButton5.setBorderPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton5);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/agregar_circular.png"))); // NOI18N
        jButton6.setMnemonic('e');
        jButton6.setToolTipText(bundle.getString("label_dar_entada")); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton6);

        jButtonPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/pedido.png"))); // NOI18N
        jButtonPedido.setMnemonic('a');
        jButtonPedido.setToolTipText(bundle.getString("label_pedido")); // NOI18N
        jButtonPedido.setBorderPainted(false);
        jButtonPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPedidoActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonPedido);

        jPanelIPV.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });
        jPanel7.add(jDateChooser1, java.awt.BorderLayout.EAST);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Fecha");
        jPanel7.add(jLabel2, java.awt.BorderLayout.CENTER);

        jCheckBox2.setText(bundle.getString("label_productos_no_utilizados")); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel7.add(jCheckBox2, java.awt.BorderLayout.WEST);

        jPanelIPV.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel3.add(jPanelIPV, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("IPV", jPanel3);

        getContentPane().add(jTabbedPane2, java.awt.BorderLayout.CENTER);

        jPanelOptions.setBackground(new java.awt.Color(204, 204, 204));
        jPanelOptions.setBorder(new org.edisoncor.gui.util.DropShadowBorder());
        jPanelOptions.setLayout(new java.awt.BorderLayout());

        jPanel8.setOpaque(false);
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText(bundle.getString("label_cocina")); // NOI18N
        jPanel8.add(jLabel1);

        jComboBox1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jComboBox1.setMinimumSize(new java.awt.Dimension(150, 70));
        jComboBox1.setPreferredSize(new java.awt.Dimension(150, 27));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel8.add(jComboBox1);

        jButtonRefrescar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/refresh.png"))); // NOI18N
        jButtonRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefrescarActionPerformed(evt);
            }
        });
        jPanel8.add(jButtonRefrescar);

        jPanelOptions.add(jPanel8, java.awt.BorderLayout.EAST);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/logout40.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelOptions.add(jButton1, java.awt.BorderLayout.LINE_START);

        getContentPane().add(jPanelOptions, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            currentSelectedKitchen = (Cocina) evt.getItem();
            if (jTabbedPane2.getSelectedIndex() == 1) {
                new LongProcessAction() {
                    @Override
                    protected void longProcessMethod() {
                        updatePanelIPV();
                    }
                }.performAction(this);
            } else {
                new LongProcessAction() {
                    @Override
                    protected void longProcessMethod() {
                        updateTableRegistroIpv();
                    }
                }.performAction(this);
            }
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        getController().darEntradaExistencia(
                ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel()).getObjectAtSelectedRow());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        getController().ajustarConsumo(
                ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel()).getObjectAtSelectedRow());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        ocultar_insumos_existencias(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String[] options = {"Impresora Regular", "Impresora Ticket", "Cancelar"};
        int selection = JOptionPane.showOptionDialog(this,
                R.RESOURCE_BUNDLE.getString("dialog_seleccionar_manera_imprimir"),
                R.RESOURCE_BUNDLE.getString("label_impresion"), JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
        switch (selection) {
            case 0:
                imprimirTabla();
                break;//impresion normal
            case 1:
                List<IpvRegistro> registros = jCheckBox1.isSelected()
                        ? ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel()).getItems()
                        : registroList;

                Impresion.getDefaultInstance().printResumenIPVDePuntoElaboracion(registros);
                break;//impresion ticket
            default:
                break;//cancelado
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Imprimir();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        getController().darEntradaIPV(
                ((RestManagerAbstractTableModel<IpvVentaRegistro>) jTableIPV.getModel()).getObjectAtSelectedRow());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        LongProcessAction action = new LongProcessAction() {
            @Override
            public void longProcessMethod() {
                updatePanelIPV();
            }
        };
        if (evt.getPropertyName().equals("date")) {
            action.performAction(jDateChooser1);
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        if (jTabbedPane2.getSelectedIndex() == 0) {
            updateTableRegistroIpv();
        } else {
            updatePanelIPV();
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        LongProcessAction action = new LongProcessAction() {
            @Override
            public void longProcessMethod() {
                updateTableRegistroIpv();
            }
        };

        if (evt.getPropertyName().equals("date")) {
            action.performAction(jDateChooser2);
        }
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jButtonPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPedidoActionPerformed
        new PedidoIpvVentasView(this, ipvList, (Cocina) jComboBox1.getSelectedItem());
    }//GEN-LAST:event_jButtonPedidoActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        ocultar_insumos_ipvs(jCheckBox2.isSelected());        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButtonRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefrescarActionPerformed
        refreshData();
    }//GEN-LAST:event_jButtonRefrescarActionPerformed

    @Override
    public void updateView() {
    }

    @Override
    public void fetchComponentData() {
        jComboBox1.setModel(new RestManagerComboBoxModel<>(getController().getCocinaList()));
        jComboBox1.setSelectedIndex(0);
        currentSelectedKitchen = (Cocina) jComboBox1.getSelectedItem();
        jTableIPV.getTableHeader().setFont(jTableIPV.getFont().deriveFont(Font.BOLD));
        jTableIPV.setDefaultRenderer(Float.class, new RestManagerCellRender());
        jTableRegistro.getTableHeader().setFont(jTableIPV.getFont().deriveFont(Font.BOLD));
        jTableRegistro.setDefaultRenderer(Float.class, new RestManagerCellRender());

    }

    @Override
    public IPVController getController() {
        return (IPVController) super.getController(); //To change body of generated methods, choose Tools | Templates.
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonPedido;
    private com.jidesoft.swing.JideButton jButtonRefrescar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<Cocina> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelIPV;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelRegistros;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTableIPV;
    private javax.swing.JTable jTableRegistro;
    // End of variables declaration//GEN-END:variables

    private void updatePanelIPV() {
        if (jDateChooser1.getDate() != null) {
            ipvList = new ArrayList<>(getController()
                    .getIpvRegistroVentaList(currentSelectedKitchen, jDateChooser1.getDate()));
        } else {
            ipvList = new ArrayList<>();
        }
        jTableIPV.setModel(new RestManagerAbstractTableModel<IpvVentaRegistro>(ipvList,
                jTableIPV) {
            @Override
            public int getColumnCount() {
                return 9;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                if (rowIndex == getRowCount() - 1 && totalRowShowing) {
                    if (columnIndex == 0) {
                        return "Total";
                    }
                    if (columnIndex == columnTotal) {
                        return utils.setDosLugaresDecimales(calcularTotal());
                    }
                    return null;
                }
                if (getRowCount() > 0 && !totalRowShowing || getRowCount() > 1 && totalRowShowing) {
                    switch (columnIndex) {
                        case 0:
                            return items.get(rowIndex).getProductoVenta().getNombre();
                        case 1:
                            return items.get(rowIndex).getInicio();
                        case 2:
                            return items.get(rowIndex).getEntrada();
                        case 3:
                            return items.get(rowIndex).getDisponible();
                        case 4:
                            return items.get(rowIndex).getAutorizos();
                        case 5:
                            return items.get(rowIndex).getVendidos();
                        case 6:
                            return items.get(rowIndex).getProductoVenta().getPrecioVenta();
                        case 7:
                            return utils.setDosLugaresDecimales(items.get(rowIndex).getVendidos() * items.get(rowIndex).getProductoVenta().getPrecioVenta());
                        case 8:
                            return items.get(rowIndex).getFinal1();
                        default:
                            return null;
                    }
                }
                return null;
            }

            @Override
            public String getColumnName(int column) {
                switch (column) {
                    case 0:
                        return "Producto Venta";
                    case 1:
                        return "Inicio";
                    case 2:
                        return "Entrada";
                    case 3:
                        return "Disponible";
                    case 4:
                        return "Autorizo";
                    case 5:
                        return "Venta";
                    case 6:
                        return "Precio Venta";
                    case 7:
                        return "Importe";
                    case 8:
                        return "Final";
                    default:
                        return null;
                }
            }

            @Override
            protected float calcularTotal() {
                float total = 0;
                if (totalRowShowing) {
                    for (IpvVentaRegistro i : items) {
                        total += i.getVendidos() * i.getProductoVenta().getPrecioVenta();
                    }
                }
                return total;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case 0:
                    case 8:
                        return String.class;
                    default:
                        return Float.class;
                }
            }
        });
        //jTableIPV.getRowSorter().toggleSortOrder(0);

        ((RestManagerAbstractTableModel<IpvVentaRegistro>) jTableIPV.getModel()).addTotalRow(7);
    }

    private void updateTableRegistroIpv() {
        jCheckBox1.setSelected(false);
        if (jDateChooser2.getDate() != null) {
            registroList = new ArrayList<>(getController()
                    .getIpvRegistroList(currentSelectedKitchen, jDateChooser2.getDate()));
        } else {
            registroList = new ArrayList<>();
        }

        jTableRegistro.setModel(new RestManagerAbstractTableModel<IpvRegistro>(registroList,
                jTableRegistro) {
            @Override
            public int getColumnCount() {
                return 8;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0:
                        return getController().getInsumo(items.get(rowIndex).getIpvRegistroPK().getIpvinsumocodInsumo());
                    case 1:
                        return items.get(rowIndex).getInicio();
                    case 2:
                        return items.get(rowIndex).getEntrada();
                    case 3:
                        return items.get(rowIndex).getDisponible();
                    case 4:
                        return items.get(rowIndex).getConsumo();
                    case 5:
                        return items.get(rowIndex).getConsumoReal();
                    case 6:
                        return items.get(rowIndex).getFinalCalculado();
                    case 7:
                        return utils.setDosLugaresDecimales(
                                items.get(rowIndex).getFinalCalculado() * items.get(rowIndex).getIpv().getInsumo().getCostoPorUnidad());
                    default:
                        return null;
                }
            }

            @Override
            public String getColumnName(int column) {
                switch (column) {
                    case 0:
                        return "Insumo";
                    case 1:
                        return "Inicio";
                    case 2:
                        return "Entrada";
                    case 3:
                        return "Disponible";
                    case 4:
                        return "Consumo";
                    case 5:
                        return "Consumo Real";
                    case 6:
                        return "Final";
                    case 7:
                        return "Importe";
                    default:
                        return null;
                }
            }
        });
        jTableRegistro.getRowSorter().toggleSortOrder(0);
    }

    private void ocultar_insumos_existencias(boolean selected) {
        RestManagerAbstractTableModel<IpvRegistro> model = ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel());
        if (selected) {
            registroList = model.getItems();
            List<IpvRegistro> filterList = new ArrayList<>();
            registroList.stream().filter((x) -> (x.getConsumo() != 0 || x.getDisponible() != 0)).forEachOrdered((x) -> {
                filterList.add(x);
            });
            model.setItems(filterList);
        } else {
            model.setItems(registroList);
        }
    }

    private void ocultar_insumos_ipvs(boolean selected) {
        RestManagerAbstractTableModel<IpvVentaRegistro> model = ((RestManagerAbstractTableModel<IpvVentaRegistro>) jTableIPV.getModel());
        if (selected) {
            ipvList = model.getItems();
            List<IpvVentaRegistro> filterList = new ArrayList<>();
            ipvList.stream().filter((x) -> (x.getVendidos() != 0 || x.getDisponible() != 0)).forEachOrdered((x) -> {
                filterList.add(x);
            });
            model.setItems(filterList);
        } else {
            model.setItems(ipvList);
        }
    }

    private void imprimirTabla() {
        MessageFormat footer = new MessageFormat("-Pag {0}-");
        MessageFormat header = new MessageFormat("IPV " + jComboBox1.getSelectedItem().toString() + " Dia " + R.DATE_FORMAT.format(jDateChooser2.getDate()));
        try {
            jTableRegistro.print(JTable.PrintMode.FIT_WIDTH, header, footer);
            System.out.println(jTableRegistro.getFont());
        } catch (PrinterException ex) {
            Logger.getLogger(IpvGestionView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void Imprimir() {

        MessageFormat footer = new MessageFormat("Entregado por                  Recibido por                  Revisado por");
        MessageFormat header = new MessageFormat("IPV " + jComboBox1.getSelectedItem().toString() + " Dia " + R.DATE_FORMAT.format(jDateChooser1.getDate()));
        try {
            createAndPrintTable();
            jTableIPV.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(IpvGestionView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void createAndPrintTable() {

    }

    private void refreshData() {
        new LongProcessAction("Actualizando") {
            @Override
            protected void longProcessMethod() {
        updatePanelIPV();
        updateTableRegistroIpv();
            }
        }.performAction(this);
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jobits.pos.ui.reserva.ubicaciones;

import com.jobits.pos.reserva.core.domain.Ubicacion;
import com.jobits.pos.reserva.core.domain.UbicacionEstado;
import com.jobits.pos.ui.AbstractListViewPanel;
import com.jobits.pos.ui.presenters.AbstractListViewPresenter;
import com.jobits.pos.ui.reserva.ColorColumnCellRender;
import static com.jobits.pos.ui.reserva.ubicaciones.presenter.UbicacionesListViewPresenter.ACTION_ACT_DESAC_UB;
import com.jobits.pos.ui.swing.utils.BindableTableModel;
import com.jobits.pos.utils.utils;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Home
 */
public class UbicacionesListView extends AbstractListViewPanel<Ubicacion> {

    public static final String VIEW_NAME = "Ubicaciones List";

    /**
     * Creates new form UbicacionesListView
     */
    public UbicacionesListView(AbstractListViewPresenter presenter) {
        super(presenter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public BindableTableModel<Ubicacion> generateTableModel() {
        return new BindableTableModel<Ubicacion>(jTableList) {
            @Override
            public int getColumnCount() {
                return 7;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0:
                        return Integer.parseInt(getRow(rowIndex).getColorubicacion());
                    case 1:
                        return getRow(rowIndex).getIdubicacion();
                    case 2:
                        return getRow(rowIndex).getNombreubicacion();
                    case 3:
                        return getRow(rowIndex).getDisponibledesde().
                                format(DateTimeFormatter.ofPattern("h:mm a"));
                    case 4:
                        return getRow(rowIndex).getDisponiblehasta().
                                format(DateTimeFormatter.ofPattern("h:mm a"));
                    case 5:
                        if (getRow(rowIndex).getReservaCollection() != null) {
                            return getRow(rowIndex).getReservaCollection().size();
                        } else {
                            return 0;
                        }
                    case 6:
                        return getRow(rowIndex).getEstadoubicacion().equals(UbicacionEstado.HABILITADA.getEstado());
                    default:
                        return null;
                }
            }

            @Override
            public String getColumnName(int column) {
                switch (column) {
                    case 1:
                        return "Codigo";
                    case 2:
                        return "Nombre";
                    case 3:
                        return "Disponible desde";
                    case 4:
                        return "Disponible hasta";
                    case 5:
                        return "Cantidad de Reservas";
                    case 6:
                        return "Habilitada";
                    default:
                        return null;
                }
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case 1:
                        return Long.class;
                    case 3:
                        return LocalTime.class;
                    case 4:
                        return LocalTime.class;
                    case 5:
                        return int.class;
                    case 6:
                        return Boolean.class;
                    default:
                        return super.getColumnClass(columnIndex); //To change body of generated methods, choose Tools | Templates.
                }
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnIndex == 6;
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                if (columnIndex == 6) {
                    getPresenter().getOperation(ACTION_ACT_DESAC_UB).doAction();
                }
            }
        };

    }

    @Override
    public String getViewName() {
        return VIEW_NAME;
    }

    @Override
    public void uiInit() {
        super.uiInit();
        jTableList.getColumnModel().getColumn(1).setCellRenderer(utils.numberColumCellRender());
        jTableList.getColumnModel().getColumn(5).setCellRenderer(utils.numberColumCellRender());
        jTableList.getColumnModel().getColumn(0).setCellRenderer(new ColorColumnCellRender());
        jTableList.getColumnModel().getColumn(0).setMaxWidth(20);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

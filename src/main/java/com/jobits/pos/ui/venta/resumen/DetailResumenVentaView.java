/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jobits.pos.ui.venta.resumen;

import com.jobits.pos.core.domain.models.ProductovOrden;
import com.jobits.pos.core.domain.models.temporal.DiaVentaWrapper;
import com.jobits.pos.recursos.R;
import com.jobits.pos.ui.AbstractListResumenViewPanel;
import com.jobits.pos.ui.presenters.AbstractListViewPresenter;
import com.jobits.pos.ui.presenters.AbstractViewPresenter;
import com.jobits.pos.ui.utils.BindableTableModel;
import com.jobits.pos.utils.utils;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JToggleButton;

/**
 *
 * @author Home
 */
public class DetailResumenVentaView extends AbstractListResumenViewPanel<DiaVentaWrapper, ProductovOrden> {

    public static final String VIEW_NAME = "Resumen Venta View";

    public DetailResumenVentaView(AbstractViewPresenter presenter, JToggleButton detailButton) {
        super(presenter, detailButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public BindableTableModel<DiaVentaWrapper> generateMainTableModel() {
        return new BindableTableModel<DiaVentaWrapper>(jTableMain) {
            @Override
            public int getColumnCount() {
                return 3;
            }

            @Override
            public String getColumnName(int column) {
                switch (column) {
                    case 0:
                        return "Fecha";
                    case 1:
                        return "Total";
                    case 2:
                        return "Promedio";
                }
                return null;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0:
                        return ((DiaVentaWrapper) getListModel().getElementAt(rowIndex))
                                .getFecha().format(DateTimeFormatter.ofPattern("d/MM/yyyy"));
                    case 1:
                        return utils.setDosLugaresDecimalesFloat(
                                ((DiaVentaWrapper) getListModel().getElementAt(rowIndex)).getTotal());
                    case 2:
                        return utils.setDosLugaresDecimalesFloat(
                                ((DiaVentaWrapper) getListModel().getElementAt(rowIndex)).getPromedio());
                }
                return null;
            }
        };
    }

    @Override
    public BindableTableModel<ProductovOrden> generateDetailTableModel() {
        return new BindableTableModel<ProductovOrden>(jTableDetail) {
            @Override
            public int getColumnCount() {
                return 5;
            }

            @Override
            public String getColumnName(int column) {
                switch (column) {
                    case 0:
                        return "Fecha";
                    case 1:
                        return "Producto Venta";
                    case 2:
                        return "Precio (" + R.COIN_SUFFIX.substring(1) + ")";
                    case 3:
                        return "Cantidad";
                    case 4:
                        return "Recaudado (" + R.COIN_SUFFIX.substring(1) + ")";
                }
                return null;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0:
                        Date d = ((ProductovOrden) getListModel().getElementAt(rowIndex)).getOrden().getVentafecha();
                        return Instant.ofEpochMilli(d.getTime()).atZone(ZoneId.systemDefault()).toLocalDate()
                                .format(DateTimeFormatter.ofPattern("d/MM/yyyy"));
                    case 1:
                        return ((ProductovOrden) getListModel().getElementAt(rowIndex)).getProductoVenta().getNombre();
                    case 2:
                        return ((ProductovOrden) getListModel().getElementAt(rowIndex)).getPrecioVendido();
                    case 3:
                        ProductovOrden p = ((ProductovOrden) getListModel().getElementAt(rowIndex));
                        return utils.setDosLugaresDecimalesFloat(p.getCantidad());
                    case 4:
                        ProductovOrden x = ((ProductovOrden) getListModel().getElementAt(rowIndex));
                        return utils.setDosLugaresDecimalesFloat(x.getPrecioVendido() * x.getCantidad());
                }
                return null;
            }
        };
    }

    @Override
    public String getViewName() {
        return VIEW_NAME;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

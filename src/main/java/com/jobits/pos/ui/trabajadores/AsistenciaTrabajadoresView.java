/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jobits.pos.ui.trabajadores;

import com.jobits.pos.ui.AbstractFragmentView;
import com.jobits.pos.ui.utils.OldAbstractCrossReferenePanel;
import java.awt.Container;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import com.jobits.pos.controller.Controller;
import com.jobits.pos.controller.trabajadores.AsistenciaPersonalController;
import com.jobits.pos.exceptions.DevelopingOperationException;
import com.jobits.pos.domain.models.AsistenciaPersonal;
import com.jobits.pos.domain.models.Personal;
import com.jobits.pos.domain.models.Venta;
import com.jobits.pos.recursos.R;
import com.jobits.pos.ui.utils.RestManagerAbstractTableModel;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import com.jobits.ui.components.MaterialComponentsFactory;

/**
 *
 * @author Jorge
 */
public class AsistenciaTrabajadoresView extends AbstractFragmentView<AsistenciaPersonal> {

    OldAbstractCrossReferenePanel<AsistenciaPersonal, Personal> panel;
    Venta v;
    private boolean readOnly = false;

    public AsistenciaTrabajadoresView(Controller controller, Venta v) {
        super(controller);
        this.v = v;
        initComponents();
        initDefaults();
    }

    public AsistenciaTrabajadoresView(Controller controller, Container parentComponent, Venta v, boolean readOnly) {
        super(controller, parentComponent);
        this.v = v;
        this.readOnly = readOnly;
        initComponents();
        initDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDetail = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanelDetail.setLayout(new java.awt.BorderLayout());
        add(jPanelDetail, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed
        getController().imprimirAsistencia();
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jButtonAMayoresActionPerformed(ActionEvent evt) {
        float aMayores = Float.parseFloat(JOptionPane.showInputDialog("Introduzca el valor de A mayores"));
        AsistenciaPersonal personal = panel.getHandler().getTableModel().getObjectAtSelectedRow();
        getController().updateAMayores(personal, aMayores);
        panel.getHandler().getTableModel().setItems(getController().getPersonalTrabajando(v));
        updateView();
    }

    @Override
    public void updateView() {
        panel.getHandler().getTableModel().setItems(getController().updateSalaries(v.getId()));
    }

    @Override
    public void initDefaults() {
        panel = new OldAbstractCrossReferenePanel<AsistenciaPersonal, Personal>("Trabajadores", getController().getTrabajadoresList()) {
            @Override
            public RestManagerAbstractTableModel<AsistenciaPersonal> getTableModel() {
                return new RestManagerAbstractTableModel<AsistenciaPersonal>(getController().getPersonalTrabajando(v), getjTableCrossReference()) {
                    @Override
                    public int getColumnCount() {
                        return R.loggedUser.getPuestoTrabajonombrePuesto().getNivelAcceso() > 2 ? 5 : 2;
                    }

                    @Override
                    public Object getValueAt(int rowIndex, int columnIndex) {
                        switch (columnIndex) {
                            case 0:
                                return R.DATE_FORMAT.format(getItems().get(rowIndex).getVenta().getFecha());
                            case 1:
                                return getItems().get(rowIndex).getPersonal().getUsuario();
                            case 2:
                                return getItems().get(rowIndex).getPago();
                            case 3:
                                return getItems().get(rowIndex).getPropina();
                            case 4:
                                return getItems().get(rowIndex).getAMayores();
                            default:
                                return null;
                        }
                    }

                    @Override
                    public String getColumnName(int column) {
                        switch (column) {
                            case 0:
                                return "Dia de Trabajo";
                            case 1:
                                return "Usuario trabajando";
                            case 2:
                                return "Estimado de pago";
                            case 3:
                                return "Propina ";
                            case 4:
                                return "A Mayores";

                            default:
                                return null;
                        }
                    }
                };
            }

            @Override
            public AsistenciaPersonal transformK_T(Personal selected) {
                getController().createNewInstance(selected, v);
                return null;
            }

            @Override
            public void removeObjectSelected() {
                getController().destroy(getHandler().getTableModel().removeObjectAtSelectedRow(), true);
            }

        };

        jButtonAMayores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAMayoresActionPerformed(evt);
            }
        });

        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        panel.getjPanelOpciones().setLayout(new java.awt.BorderLayout());

        jButtonImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/impresora.png"))); // NOI18N
        jButtonImprimir.setText("Asistencia");
        jButtonImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        panel.getjPanelOpciones().add(jButtonImprimir, java.awt.BorderLayout.WEST);
        
        panel.getjPanelBusqueda().add(panel.getEliminarButton());

        jButtonAMayores.setText("A Mayores");
        panel.getjPanelOpciones().add(jButtonAMayores, java.awt.BorderLayout.EAST);

        panel.setReadOnlyMode(readOnly);
        jPanelDetail.add(panel);

    }

    @Override
    public AsistenciaPersonalController getController() {
        return (AsistenciaPersonalController) super.getController(); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonImprimir = MaterialComponentsFactory.Buttons.getOutlinedButton();
    private javax.swing.JButton jButtonAMayores = MaterialComponentsFactory.Buttons.getOutlinedButton();
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
}

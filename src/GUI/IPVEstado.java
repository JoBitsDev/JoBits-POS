/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.JXTable;
import restManager.persistencia.Cocina;
import restManager.persistencia.Ipv;
import restManager.persistencia.IpvPK;
import restManager.persistencia.IpvRegistro;
import restManager.persistencia.IpvRegistroPK;
import restManager.persistencia.jpa.staticContent;
import restManager.persistencia.models.InsumoDAO;
import restManager.printservice.Impresion;
import restManager.util.comun;

/**
 *
 * @author Jorge
 */
public class IPVEstado extends javax.swing.JPanel {

    private List<IpvRegistro> registros;
    private Cocina c;
    private Date fechaInicio, fechaFin;

    /**
     * Creates new form VistaIPV
     */
    public IPVEstado(Cocina c, Date fecha) {
        initComponents();
        this.c = c;
        this.fechaInicio = fecha;
        this.fechaFin = fechaInicio;
        registros = findRegistros(c, fecha, null);
        updateDialog();
    }

    public IPVEstado(Cocina c, Date fechaInicio, Date fechaFin) {
        initComponents();
        this.c = c;
        this.fechaInicio = fechaInicio;
        this.fechaFin = fechaFin;
        registros = findRegistros(c, fechaInicio, fechaFin);
        updateDialog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaVistaIPV = new org.jdesktop.swingx.JXTable();
        buttonDarEntrada = new org.edisoncor.gui.button.ButtonTextDown();
        buttonImprimir = new org.edisoncor.gui.button.ButtonTextDown();
        buttonConsumoReal = new org.edisoncor.gui.button.ButtonTextDown();

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(800, 600));

        TablaVistaIPV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Insumo", "Inicio", "Entrada", "Disponible", "Consumo", "Consumo Real", "Final", "Final Real"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaVistaIPV.setMaximumSize(new java.awt.Dimension(800, 600));
        TablaVistaIPV.setMinimumSize(new java.awt.Dimension(800, 600));
        TablaVistaIPV.setName(""); // NOI18N
        jScrollPane1.setViewportView(TablaVistaIPV);

        buttonDarEntrada.setText("Dar entrada");
        buttonDarEntrada.setEnabled(Main.NIVEL_2);
        buttonDarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDarEntradaActionPerformed(evt);
            }
        });

        buttonImprimir.setText("Imprimir");
        buttonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImprimirActionPerformed(evt);
            }
        });

        buttonConsumoReal.setText("Consumo Real");
        buttonConsumoReal.setEnabled(Main.NIVEL_3);
        buttonConsumoReal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConsumoRealActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonDarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonConsumoReal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonConsumoReal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonDarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDarEntradaActionPerformed
        darEntrada();
    }//GEN-LAST:event_buttonDarEntradaActionPerformed

    private void buttonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImprimirActionPerformed
        imprimir();
    }//GEN-LAST:event_buttonImprimirActionPerformed

    private void buttonConsumoRealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConsumoRealActionPerformed
        consumoReal();
    }//GEN-LAST:event_buttonConsumoRealActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTable TablaVistaIPV;
    private org.edisoncor.gui.button.ButtonTextDown buttonConsumoReal;
    private org.edisoncor.gui.button.ButtonTextDown buttonDarEntrada;
    private org.edisoncor.gui.button.ButtonTextDown buttonImprimir;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void updateDialog() {
        if (registros == null) {
            throw new AssertionError("The array registros is null");
        }
        ArrayList[] rowData = comun.initArray(new ArrayList[9]);
        try {
            for (IpvRegistro x : registros) {
                rowData[0].add(x.getIpvRegistroPK().getIpvinsumocodInsumo());
                rowData[1].add(InsumoDAO.getInstance().find(
                        x.getIpvRegistroPK().getIpvinsumocodInsumo()).getNombre());
                rowData[2].add(x.getInicio());
                rowData[3].add(x.getEntrada());
                x.setDisponible(x.getInicio()+x.getEntrada());
                rowData[4].add(x.getDisponible());
                rowData[5].add(x.getConsumo());
                rowData[6].add(x.getConsumoReal());
                x.setFinal1(x.getDisponible()-x.getConsumo());
                rowData[7].add(x.getFinal1());
                x.setFinalReal(x.getDisponible()-x.getConsumoReal());
                rowData[8].add(x.getFinalReal());
                staticContent.ipvregJPA.edit(x);
            }
            comun.UpdateTable(rowData, TablaVistaIPV);
        } catch (Exception ex) {
            Logger.getLogger(IPVEstado.class.getName()).log(Level.SEVERE, null, ex);

        }

    }

    private List<IpvRegistro> findRegistros(Cocina c, Date fechaInicio, Date fechaFin) {
        
        //Chequeando pre condiciones
        if (fechaInicio == null) {
            throw new AssertionError("La fecha inicio no puede ser nula");
        }
        if (c == null) {
            throw new AssertionError("La cocina no puede ser nula");
        }

        if (fechaFin == null) {
            fechaFin = fechaInicio;
        }

        //inicializando variables
        
        List<IpvRegistro> ret = staticContent.ipvregJPA.
                findIpvRegistroEntities();

        List<Ipv> ipvs = staticContent.ipvJPA.findIpvEntities();
        
        //separando los ipvs que son de la cocina determinada
        
        for (int i = 0; i < ipvs.size();) {
           if(ipvs.get(i).getIpvPK().getCocinacodCocina().equals(c.getCodCocina())){
               i++;
           }
           else{
              ipvs.remove(i);
           }
        }
        
        //cargando los datos del ultimo ipv
        
        for (int i = 0; i < ret.size();) {
            if (!(ret.get(i).getIpvRegistroPK().getFecha().compareTo(fechaInicio) >= 0
                    && ret.get(i).getIpvRegistroPK().getFecha().compareTo(fechaFin) <= 0
                    && ret.get(i).getIpvRegistroPK().
                            getIpvcocinacodCocina().
                            equals(c.getCodCocina()))) {
                ret.remove(i);
            } else {
                i++;
            }
        }
        
        //buscando si hay alguno que no esta en la norma para inizializarlo en 0
        if(ipvs.size() != ret.size()){
            
        for (int i = 0; i < ipvs.size(); i++) {
            boolean founded = false;
            for (int j = 0; j < ret.size() && !founded; j++) {
                if(ret.get(j).getIpvRegistroPK().getIpvcocinacodCocina().
                        equals(ipvs.get(i).getIpvPK().getCocinacodCocina()) &&
                        ret.get(j).getIpvRegistroPK().getIpvinsumocodInsumo().
                                equals(ipvs.get(i).getIpvPK().getInsumocodInsumo())){
                    founded = true;
                }
            }
            if(!founded){
                IpvRegistroPK aux = 
                        new IpvRegistroPK(
                                ipvs.get(i).getInsumo().getCodInsumo(),
                                ipvs.get(i).getCocina().getCodCocina(),
                        fechaFin);
                IpvPK pk = new IpvPK(ipvs.get(i).getInsumo().getCodInsumo(),
                                ipvs.get(i).getCocina().getCodCocina());
                
                
                IpvRegistro newreg = new IpvRegistro(aux);
                Ipv ipv = new Ipv(pk);
                ipv.setCocina(ipvs.get(i).getCocina());
                ipv.setInsumo(ipvs.get(i).getInsumo());
                
                newreg.setConsumo((float)0);
                newreg.setConsumoReal((float)0);
                newreg.setDisponible((float)0);
                newreg.setEntrada((float)0);
                newreg.setFinal1((float)0);
                newreg.setFinalReal((float)0);
                newreg.setInicio((float)0);
                newreg.setIpv(ipv);
                try {
                    staticContent.ipvregJPA.create(newreg);
                } catch (Exception ex) {
                    Logger.getLogger(IPVEstado.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
                ret.add(newreg);
            }
        }
        
        
        return ret;
        
        }
        
      return ret;  

    }

    private void darEntrada() {
    try{
        int selected = TablaVistaIPV.getSelectedRow();
      if(selected == -1){
          throw new NullPointerException("No hay ninguna fila seleccionada");
      }  
      String nombreInsumo = (String) TablaVistaIPV.getValueAt(selected, 1),
              codInsumo = (String) TablaVistaIPV.getValueAt(selected, 0);
      float cant = Float.parseFloat(JOptionPane.showInputDialog("Introduzca la cantidad de "+nombreInsumo
              +" a dar entrada"));
     
        for (IpvRegistro r : registros) {
            if(r.getIpvRegistroPK().getIpvinsumocodInsumo().equals(codInsumo)){
               float entrada = r.getEntrada();
               r.setEntrada(entrada + cant);
               staticContent.ipvregJPA.edit(r);
 //              staticContent.ipvregJPA.getEntityManager().flush();
               break;
            }
        }
       updateDialog();
        
    }catch(Exception ex){
        JOptionPane.showMessageDialog(this, ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
    }
    }

    private void imprimir() {
        int resp = JOptionPane.showConfirmDialog(this, "Desea imprimir en un ticket el resumen");
        if(resp == JOptionPane.YES_OPTION){
        Impresion i = Impresion.getDefaultInstance();
        i.printResumenIPVDePuntoElaboracion(registros);
        }
        if(resp == JOptionPane.NO_OPTION){
           throw new UnsupportedOperationException("impresion por impresora grande en desarrollo");
        }
    }

    private void consumoReal() {
    try{
        int selected = TablaVistaIPV.getSelectedRow();
      if(selected == -1){
          throw new NullPointerException("No hay ninguna fila seleccionada");
      }  
      String nombreInsumo = (String) TablaVistaIPV.getValueAt(selected, 1),
              codInsumo = (String) TablaVistaIPV.getValueAt(selected, 0);
      float cant = Float.parseFloat(JOptionPane.showInputDialog(
              "Introduzca la cantidad consumida en el dia de "+nombreInsumo));
        for (IpvRegistro r : registros) {
            if(r.getIpvRegistroPK().getIpvinsumocodInsumo().equals(codInsumo)){
                r.setConsumoReal(cant);break;
            }
        }
       updateDialog();
        
    }catch(NullPointerException | NumberFormatException ex){
        JOptionPane.showMessageDialog(this, ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
    }
    
    }

    //Getters y Setters
    
    public List<IpvRegistro> getRegistros() {
        return registros;
    }

    public void setRegistros(List<IpvRegistro> registros) {
        this.registros = registros;
    }

    public Cocina getC() {
        return c;
    }

    public void setC(Cocina c) {
        this.c = c;
    }

    public Date getFechaInicio() {
        return fechaInicio;
    }

    public void setFechaInicio(Date fechaInicio) {
        this.fechaInicio = fechaInicio;
    }

    public Date getFechaFin() {
        return fechaFin;
    }

    public void setFechaFin(Date fechaFin) {
        this.fechaFin = fechaFin;
    }

    public JXTable getTablaVistaIPV() {
        return TablaVistaIPV;
    }

    public void setTablaVistaIPV(JXTable TablaVistaIPV) {
        this.TablaVistaIPV = TablaVistaIPV;
    }

}

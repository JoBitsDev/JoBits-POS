/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Views.Almacen;

import GUI.Views.AbstractView;
import GUI.Views.util.AbstractCrossReferenePanel;
import java.awt.event.ItemEvent;
import java.awt.print.PrinterException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import restManager.controller.AbstractDialogController;
import restManager.controller.almacen.IPVController;
import restManager.exceptions.DevelopingOperationException;
import restManager.persistencia.Cocina;
import restManager.persistencia.Insumo;
import restManager.persistencia.Ipv;
import restManager.persistencia.IpvPK;
import restManager.persistencia.IpvRegistro;
import restManager.printservice.ComponentPrinter;
import restManager.printservice.Impresion;
import restManager.resources.R;
import restManager.util.RestManagerAbstractTableModel;
import restManager.util.RestManagerComboBoxModel;
import restManager.util.RestManagerListModel;
import restManager.util.comun;

/**
 *
 * @author Jorge
 */
public class IpvGestionView extends AbstractView {

    private Cocina currentSelectedKitchen;
    private AbstractCrossReferenePanel<Ipv, Insumo> panelIPVAsign;
    private List<IpvRegistro> registroList;

    public IpvGestionView(AbstractView parent, AbstractDialogController controller) {
        super(DialogType.FULL_SCREEN, controller, parent);
        initComponents();
        fetchComponentData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelRegistros = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRegistro = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListRegistro = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanelData = new javax.swing.JPanel();
        jPanelOptions = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jTabbedPane1.setToolTipText("");

        jPanelRegistros.setLayout(new java.awt.BorderLayout(5, 0));

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTableRegistro.setAutoCreateRowSorter(true);
        jTableRegistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableRegistro);

        jPanelRegistros.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(new org.pushingpixels.lafwidget.utils.ShadowPopupBorder());
        jPanel1.setLayout(new java.awt.GridLayout());

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/impresora.png"))); // NOI18N
        jButton4.setMnemonic('i');
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings"); // NOI18N
        jButton4.setText(bundle.getString("label_imprimir")); // NOI18N
        jButton4.setToolTipText("Imprimir");
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/agregar_circular.png"))); // NOI18N
        jButton2.setMnemonic('e');
        jButton2.setToolTipText(bundle.getString("label_dar_entada")); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/analitica.png"))); // NOI18N
        jButton3.setMnemonic('a');
        jButton3.setToolTipText(bundle.getString("label_ajustar_consumo")); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jPanelRegistros.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jListRegistro.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListRegistro.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListRegistro.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListRegistroValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListRegistro);

        jPanelRegistros.add(jScrollPane3, java.awt.BorderLayout.LINE_START);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jCheckBox1.setText(bundle.getString("label_ocultar_insumos_no_utilizados")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox1);

        jPanelRegistros.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Registros IPV", new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/registro_lapiz.png")), jPanelRegistros, "Ver los registros de IPvs"); // NOI18N

        jPanelData.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Ajustes IPV", new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/controles.png")), jPanelData, "Ajustar que insumo va en que IPV"); // NOI18N

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanelOptions.setBackground(new java.awt.Color(204, 204, 204));
        jPanelOptions.setBorder(new org.edisoncor.gui.util.DropShadowBorder());
        jPanelOptions.setLayout(new java.awt.BorderLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restManager/resources/images/botonlogout.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelOptions.add(jButton1, java.awt.BorderLayout.LINE_START);

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText(bundle.getString("label_cocina")); // NOI18N
        jPanelOptions.add(jLabel1, java.awt.BorderLayout.CENTER);

        jComboBox1.setMinimumSize(new java.awt.Dimension(150, 27));
        jComboBox1.setPreferredSize(new java.awt.Dimension(150, 27));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jPanelOptions.add(jComboBox1, java.awt.BorderLayout.LINE_END);

        getContentPane().add(jPanelOptions, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            currentSelectedKitchen = (Cocina) evt.getItem();
            updateView();
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        getController().darEntrada(
                ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel()).getObjectAtSelectedRow());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedRow = jTableRegistro.convertRowIndexToModel(jTableRegistro.getSelectedRow());
        getController().ajustarConsumo(
                ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel()).getObjectAtSelectedRow());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jListRegistroValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListRegistroValueChanged
        if (!evt.getValueIsAdjusting()) {
            updateTableRegistroIpv();
        }
    }//GEN-LAST:event_jListRegistroValueChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        ocultar_insumos(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            String[] options = {"Impresora Regular", "Impresora Ticket", "Cancelar"};
        int selection = JOptionPane.showOptionDialog(this,
                R.RESOURCE_BUNDLE.getString("dialog_seleccionar_manera_imprimir"),
                R.RESOURCE_BUNDLE.getString("label_impresion"), JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
        switch (selection) {
            case 0:
                imprimirTabla();
                break;//impresion normal
            case 1:
                new Impresion().printResumenIPVDePuntoElaboracion(registroList);
                break;//impresion ticket
            default:
                break;//cancelado
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    @Override
    public void updateView() {
        if (currentSelectedKitchen != null && panelIPVAsign != null) {
            updatePanelAjustes();
            updatePanelRegistros();
        }

    }

    @Override
    public void fetchComponentData() {
        jComboBox1.setModel(new RestManagerComboBoxModel<>(getController().getCocinaList()));
        jComboBox1.setSelectedIndex(0);
        currentSelectedKitchen = (Cocina) jComboBox1.getSelectedItem();
        panelIPVAsign = new AbstractCrossReferenePanel<Ipv, Insumo>("Agregar Insumo", getController().getInsumoList()) {
            @Override
            public RestManagerAbstractTableModel<Ipv> getTableModel() {
                return new RestManagerAbstractTableModel<Ipv>(currentSelectedKitchen.getIpvList(), getjTableCrossReference()) {
                    @Override
                    public int getColumnCount() {
                        return 1;
                    }

                    @Override
                    public Object getValueAt(int rowIndex, int columnIndex) {
                        return items.get(rowIndex).getInsumo();
                    }

                    @Override
                    public String getColumnName(int column) {
                        return "Insumo";
                    }
                };
            }

            @Override
            public Ipv transformK_T(Insumo selected) {
                Ipv ret = new Ipv();
                IpvPK retPK = new IpvPK(selected.getCodInsumo(), currentSelectedKitchen.getCodCocina());
                ret.setCocina(currentSelectedKitchen);
                ret.setInsumo(selected);
                ret.setIpvPK(retPK);
                ret.setIpvRegistroList(new ArrayList<>());

                getController().create(ret, true);
                return ret;
            }

            @Override
            public void removeObjectSelected() {
                Ipv selected = getHandler().getTableModel().getObjectAtSelectedRow();
                getController().destroy(getHandler().getTableModel().getObjectAtSelectedRow(), true);
                getHandler().getTableModel().removeObject(selected);
            }

        };
        if (jPanelData.getComponentCount() == 0) {
            jPanelData.add(panelIPVAsign);

        } else {
            jPanelData.remove(panelIPVAsign);
            jPanelData.add(panelIPVAsign);
        }
        jPanelData.revalidate();
    }

    @Override
    public IPVController getController() {
        return (IPVController) super.getController(); //To change body of generated methods, choose Tools | Templates.
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<Cocina> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListRegistro;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelData;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelRegistros;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableRegistro;
    // End of variables declaration//GEN-END:variables

    private void updatePanelRegistros() {
        jListRegistro.setModel(new RestManagerListModel<>(getController().getIpvRegistroList(currentSelectedKitchen)));

    }

    private void updatePanelAjustes() {
        panelIPVAsign.getHandler().getTableModel().setItems(currentSelectedKitchen.getIpvList());
    }

    private void updateTableRegistroIpv() {
        try {
            jCheckBox1.setSelected(false);
             registroList = new ArrayList<>(getController()
                    .getIpvRegistroList(currentSelectedKitchen, R.DATE_FORMAT.parse(jListRegistro.getSelectedValue())));
            registroList = getController().calculate_IPV_to_Currenr((ArrayList<IpvRegistro>) registroList);
            jTableRegistro.setModel(new RestManagerAbstractTableModel<IpvRegistro>(registroList,
                    jTableRegistro) {
                @Override
                public int getColumnCount() {
                    return 8;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    switch (columnIndex) {
                        case 0:
                            return getController().getInsumo(items.get(rowIndex).getIpvRegistroPK().getIpvinsumocodInsumo());
                        case 1:
                            return items.get(rowIndex).getInicio();
                        case 2:
                            return items.get(rowIndex).getEntrada();
                        case 3:
                            return items.get(rowIndex).getDisponible();
                        case 4:
                            return items.get(rowIndex).getConsumo();
                        case 5:
                            return items.get(rowIndex).getConsumoReal();
                        case 6:
                            return items.get(rowIndex).getFinal1();
                        case 7:
                            return comun.setDosLugaresDecimales(
                                    items.get(rowIndex).getFinal1() * items.get(rowIndex).getIpv().getInsumo().getCostoPorUnidad());
                        default:
                            return null;
                    }
                }

                @Override
                public String getColumnName(int column) {
                    switch (column) {
                        case 0:
                            return "Insumo";
                        case 1:
                            return "Inicio";
                        case 2:
                            return "Entrada";
                        case 3:
                            return "Disponible";
                        case 4:
                            return "Consumo";
                        case 5:
                            return "Consumo Real";
                        case 6:
                            return "Final";
                        case 7:
                            return "Importe";
                        default:
                            return null;
                    }
                }
            });
            jTableRegistro.getRowSorter().toggleSortOrder(0);
        } catch (ParseException ex) {
            Logger.getLogger(IpvGestionView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void ocultar_insumos(boolean selected) {
        RestManagerAbstractTableModel<IpvRegistro> model = ((RestManagerAbstractTableModel<IpvRegistro>) jTableRegistro.getModel());
        if (selected) {
            registroList = model.getItems();
            List<IpvRegistro> filterList = new ArrayList<>();
            registroList.stream().filter((x) -> (x.getConsumo() != 0)).forEachOrdered((x) -> {
                filterList.add(x);
            });
            model.setItems(filterList);
        } else {
            model.setItems(registroList);
        }
    }

    private void imprimirTabla() {
        MessageFormat footer = new MessageFormat("-Pag {0}-");
        MessageFormat header = new MessageFormat("IPV " + jComboBox1.getSelectedItem().toString() + " Dia " + jListRegistro.getSelectedValue());
        try {
            ComponentPrinter.printComponent(jScrollPane2,
                    "IPV " + jComboBox1.getSelectedItem().toString() + " Dia " + jListRegistro.getSelectedValue(), true);
            jTableRegistro.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(IpvGestionView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

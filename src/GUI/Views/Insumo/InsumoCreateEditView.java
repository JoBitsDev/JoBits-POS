/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Views.Insumo;

import GUI.AbstractDialog;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.table.AbstractTableModel;
import restManager.controller.AbstractController;
import restManager.controller.insumo.InsumoListController;
import restManager.persistencia.Almacen;
import restManager.persistencia.Insumo;
import restManager.persistencia.InsumoElaborado;
import restManager.persistencia.InsumoElaboradoPK;
import restManager.resources.R;

/**
 *
 * @author Jorge
 */
public class InsumoCreateEditView extends AbstractDialog {

    private State state;
    private Insumo insumo;
    private MyTableModel model = new MyTableModel(new ArrayList<>());

    public InsumoCreateEditView(AbstractController controller, Frame owner, boolean modal) {
        super(DialogType.INPUT_LARGE, controller, owner, modal);
        initComponents();

    }

    public InsumoCreateEditView(AbstractController controller, Dialog owner, boolean modal) {
        super(DialogType.INPUT_LARGE, controller, owner, modal);
        initComponents();
    }

    public void updateView(List<Insumo> items, Insumo editingItem, List<Almacen> almacenes) {
        updateTable(items);
        updateComboBoxes(almacenes);
        updatePanelInputs(editingItem);

    }

    private void updateTable(List<Insumo> items) {
        if (model.getItems().isEmpty()) {
            model = new MyTableModel(items);
            jXTable1.setModel(model);
        }
    }

    private void updatePanelInputs(Insumo ins) {
        this.insumo = ins;
        if (insumo != null) {
            if (insumo.getNombre().isEmpty()) {
                state = State.CREATING;
            } else {
                state = State.UPDATING;
                jButtonAdd.setText(R.RESOURCE_BUNDLE.getString("label_editar"));
            }
            jTextFieldNombre.setText(insumo.getNombre());
            jSpinnerCosto.setValue(insumo.getCostoPorUnidad());
            jSpinnerCantidadExistente.setValue(insumo.getCantidadExistente());
            jSpinnerEstimacionStock.setValue(insumo.getStockEstimation());
            jComboBoxUM.setSelectedItem(R.UM.valueOf(insumo.getUm()));
            jComboBoxAlmacen.setSelectedItem(insumo.getAlmacencodAlmacen());
            if (insumo.getElaborado()) {
                jCheckBoxElaborado.setSelected(true);
                jXTable1.setEnabled(true);
                model.fillInsumoElabData(insumo.getInsumoElaboradoList());
                jSpinnerCantidadCreada.setValue(insumo.getCantidadCreada());
            }
        }
    }

    private void updateComboBoxes(List<Almacen> items) {
        items.forEach((item) -> {
            jComboBoxAlmacen.addItem(item);
        });
        for (R.UM x : R.UM.values()) {
            jComboBoxUM.addItem(x);
        }
    }

    private void validateInsumo() {
        insumo.setCostoPorUnidad((Float) jSpinnerCosto.getValue());
        insumo.setCantidadExistente((Float) jSpinnerCantidadExistente.getValue());
        insumo.setStockEstimation((Float) jSpinnerEstimacionStock.getValue());
        insumo.setUm(jComboBoxUM.getSelectedItem().toString());
        insumo.setAlmacencodAlmacen((Almacen) jComboBoxAlmacen.getSelectedItem());
        if (insumo.getElaborado()) {
            insumo.setInsumoElaboradoList(((MyTableModel) jXTable1.getModel()).getinsumosSelected());
            insumo.setCantidadCreada((Float) jSpinnerCantidadCreada.getValue());

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXPanelTabla = new org.jdesktop.swingx.JXPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jXLabelNombreCosto = new org.jdesktop.swingx.JXLabel();
        jXLabelNombreValorCosto = new org.jdesktop.swingx.JXLabel();
        jCheckBoxElaborado = new javax.swing.JCheckBox();
        jXLabelNombreCantCreada = new org.jdesktop.swingx.JXLabel();
        jSpinnerCantidadCreada = new javax.swing.JSpinner();
        jXPanelControles = new org.jdesktop.swingx.JXPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jXPanelInputs = new org.jdesktop.swingx.JXPanel();
        jXLabelNombre = new org.jdesktop.swingx.JXLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jXLabelUM = new org.jdesktop.swingx.JXLabel();
        jComboBoxUM = new javax.swing.JComboBox<>();
        jXLabelNombreAlmacen = new org.jdesktop.swingx.JXLabel();
        jComboBoxAlmacen = new javax.swing.JComboBox<>();
        jXLabelNombreCantExist = new org.jdesktop.swingx.JXLabel();
        jSpinnerCantidadExistente = new javax.swing.JSpinner();
        jXLabelNombre4 = new org.jdesktop.swingx.JXLabel();
        jSpinnerEstimacionStock = new javax.swing.JSpinner();
        jXLabelCostoU = new org.jdesktop.swingx.JXLabel();
        jSpinnerCosto = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings"); // NOI18N
        setTitle(bundle.getString("label_crear_insumo")); // NOI18N

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "UM", "Cantidad", "Costo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jXTable1.setEnabled(jCheckBoxElaborado.isSelected());
        jScrollPane1.setViewportView(jXTable1);

        jXLabelNombreCosto.setText(bundle.getString("label_costo")); // NOI18N

        jXLabelNombreValorCosto.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jXLabelNombreValorCosto.setText(bundle.getString("label_lista_ingredientes")); // NOI18N

        jCheckBoxElaborado.setText(bundle.getString("label_elaborado")); // NOI18N
        jCheckBoxElaborado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxElaboradoStateChanged(evt);
            }
        });
        jCheckBoxElaborado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxElaboradoActionPerformed(evt);
            }
        });

        jXLabelNombreCantCreada.setText(bundle.getString("label_cantidad_creada")); // NOI18N

        jSpinnerCantidadCreada.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 5.0f));

        javax.swing.GroupLayout jXPanelTablaLayout = new javax.swing.GroupLayout(jXPanelTabla);
        jXPanelTabla.setLayout(jXPanelTablaLayout);
        jXPanelTablaLayout.setHorizontalGroup(
            jXPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jXPanelTablaLayout.createSequentialGroup()
                .addComponent(jCheckBoxElaborado)
                .addGap(67, 67, 67)
                .addComponent(jXLabelNombreCantCreada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerCantidadCreada, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(jXLabelNombreCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXLabelNombreValorCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jXPanelTablaLayout.setVerticalGroup(
            jXPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabelNombreCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabelNombreValorCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxElaborado)
                    .addComponent(jXLabelNombreCantCreada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerCantidadCreada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonAdd.setText(bundle.getString("label_agregar")); // NOI18N
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jXPanelControles.add(jButtonAdd);

        jButtonCancelar.setText(bundle.getString("label_cancelar")); // NOI18N
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        jXPanelControles.add(jButtonCancelar);

        jXPanelInputs.setBackground(new java.awt.Color(204, 204, 0));
        jXPanelInputs.setBorder(new org.pushingpixels.substance.internal.utils.border.SubstanceBorder());
        jXPanelInputs.setForeground(new java.awt.Color(204, 204, 0));

        jXLabelNombre.setText(bundle.getString("label_nombre")); // NOI18N

        jTextFieldNombre.setBorder(null);
        jTextFieldNombre.setInputVerifier(new Verifier());

        jXLabelUM.setText(bundle.getString("label_um")); // NOI18N

        jXLabelNombreAlmacen.setText(bundle.getString("label_almacen")); // NOI18N

        jXLabelNombreCantExist.setText(bundle.getString("label_cantidad_existente")); // NOI18N

        jSpinnerCantidadExistente.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 5.0f));

        jXLabelNombre4.setText(bundle.getString("label_est_stock")); // NOI18N

        jSpinnerEstimacionStock.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 5.0f));

        jXLabelCostoU.setText(bundle.getString("label_costo_unidad")); // NOI18N

        jSpinnerCosto.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 5.0f));

        javax.swing.GroupLayout jXPanelInputsLayout = new javax.swing.GroupLayout(jXPanelInputs);
        jXPanelInputs.setLayout(jXPanelInputsLayout);
        jXPanelInputsLayout.setHorizontalGroup(
            jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanelInputsLayout.createSequentialGroup()
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jXLabelUM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jXPanelInputsLayout.createSequentialGroup()
                            .addGap(85, 85, 85)
                            .addComponent(jXLabelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanelInputsLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jXLabelCostoU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSpinnerCosto, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addComponent(jTextFieldNombre, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jComboBoxUM, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXLabelNombreAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabelNombre4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabelNombreCantExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerEstimacionStock, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerCantidadExistente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jXPanelInputsLayout.setVerticalGroup(
            jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanelInputsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabelNombreAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabelNombreCantExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerCantidadExistente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxUM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabelUM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jXPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabelCostoU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabelNombre4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinnerEstimacionStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXPanelInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXPanelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXPanelControles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXPanelInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXPanelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXPanelControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        validateInsumo();
        if (state == State.CREATING) {
            ((InsumoListController) getController()).createInsumo(insumo);
        } else {
            ((InsumoListController) getController()).updateInsumo(insumo);
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jCheckBoxElaboradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxElaboradoActionPerformed

    }//GEN-LAST:event_jCheckBoxElaboradoActionPerformed

    private void jCheckBoxElaboradoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxElaboradoStateChanged
        insumo.setElaborado(jCheckBoxElaborado.isSelected());
        jXTable1.setEnabled(jCheckBoxElaborado.isSelected());
    }//GEN-LAST:event_jCheckBoxElaboradoStateChanged

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        ((InsumoListController) getController()).disposeNewEditView();
    }//GEN-LAST:event_jButtonCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JCheckBox jCheckBoxElaborado;
    private javax.swing.JComboBox<Almacen> jComboBoxAlmacen;
    private javax.swing.JComboBox<R.UM> jComboBoxUM;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerCantidadCreada;
    private javax.swing.JSpinner jSpinnerCantidadExistente;
    private javax.swing.JSpinner jSpinnerCosto;
    private javax.swing.JSpinner jSpinnerEstimacionStock;
    private javax.swing.JTextField jTextFieldNombre;
    private org.jdesktop.swingx.JXLabel jXLabelCostoU;
    private org.jdesktop.swingx.JXLabel jXLabelNombre;
    private org.jdesktop.swingx.JXLabel jXLabelNombre4;
    private org.jdesktop.swingx.JXLabel jXLabelNombreAlmacen;
    private org.jdesktop.swingx.JXLabel jXLabelNombreCantCreada;
    private org.jdesktop.swingx.JXLabel jXLabelNombreCantExist;
    private org.jdesktop.swingx.JXLabel jXLabelNombreCosto;
    private org.jdesktop.swingx.JXLabel jXLabelNombreValorCosto;
    private org.jdesktop.swingx.JXLabel jXLabelUM;
    private org.jdesktop.swingx.JXPanel jXPanelControles;
    private org.jdesktop.swingx.JXPanel jXPanelInputs;
    private org.jdesktop.swingx.JXPanel jXPanelTabla;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables

    private class MyTableModel extends AbstractTableModel {

        private final List<Insumo> items;
        private final float[] itemsAmount;
        private final float[] itemsCosts;

        public MyTableModel(List<Insumo> items) {
            this.items = items;
            itemsAmount = new float[items.size()];
            itemsCosts = new float[items.size()];

        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 3:
                    itemsAmount[rowIndex] = (float) aValue;
                    break;
                case 4:
                    itemsCosts[rowIndex] = (float) aValue;
                    break;
            }
            fireTableCellUpdated(rowIndex, columnIndex);

        }

        @Override
        public int getRowCount() {
            return items.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return items.get(rowIndex).getCodInsumo();
                case 1:
                    return items.get(rowIndex).getNombre();
                case 2:
                    return items.get(rowIndex).getUm();
                case 3:
                    return itemsAmount[rowIndex];
                case 4:
                    return itemsCosts[rowIndex];
                default:
                    return null;

            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Codigo";
                case 1:
                    return "Nombre";
                case 2:
                    return "UM";
                case 3:
                    return "Cantidad";
                case 4:
                    return "Costo";
                default:
                    return null;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.class;
                case 1:
                    return String.class;
                case 2:
                    return String.class;
                case 3:
                    return Float.class;
                case 4:
                    return Float.class;
                default:
                    return null;
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 3 || columnIndex == 4;
        }

        public void fillInsumoElabData(List<InsumoElaborado> itemsToFill) {
            for (InsumoElaborado x : itemsToFill) {
                int index = items.indexOf(x.getInsumo1());
                if (index != -1) {
                    itemsAmount[index] = x.getCantidad();
                    itemsCosts[index] = x.getCosto();
                }
            }
            fireTableDataChanged();
        }

        public List<InsumoElaborado> getinsumosSelected() {
            ArrayList<InsumoElaborado> ret = new ArrayList<>();
            for (int i = 0; i < itemsAmount.length; i++) {
                if (itemsAmount[i] > 0) {
                    InsumoElaboradoPK pk = new InsumoElaboradoPK(insumo.getCodInsumo(), items.get(i).getCodInsumo());
                    InsumoElaborado elab = new InsumoElaborado(pk);
                    elab.setCantidad(itemsAmount[i]);
                    elab.setCosto(itemsCosts[i]);
                    elab.setInsumo1(items.get(i));
                    elab.setInsumo(insumo);
                    ret.add(elab);
                }
            }
            return ret;
        }

        public List<Insumo> getItems() {
            return items;
        }

        public float[] getItemsAmount() {
            return itemsAmount;
        }

        public float[] getItemsCosts() {
            return itemsCosts;
        }

    }

    private class Verifier extends InputVerifier {

        @Override
        public boolean verify(JComponent input) {
            JTextField in = (JTextField) input;
            boolean invalid;
            String validName = in.getText();

            invalid = !validName.matches("[A-Z][[a-zA-Z]* X*[\\s]]*") || validName.length() > 60;

            if (invalid) {
                in.setBorder(new LineBorder(Color.red));
            } else {
                in.setBorder(null);
                insumo.setNombre(validName);
            }

            return !invalid;
        }

    }

    private enum State {
        CREATING, UPDATING
    }

}

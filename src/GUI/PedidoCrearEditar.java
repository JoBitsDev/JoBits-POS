/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.print.PrintException;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import restManager.persistencia.Configuracion;
import restManager.persistencia.Mesa;
import restManager.persistencia.Nota;
import restManager.persistencia.NotaPK;
import restManager.persistencia.Orden;
import restManager.persistencia.ProductoVenta;
import restManager.persistencia.ProductovOrden;
import restManager.persistencia.Venta;
import restManager.persistencia.jpa.exceptions.NonexistentEntityException;
import restManager.persistencia.jpa.staticContent;
import restManager.printservice.Impresion;
import restManager.resources.R;

import restManager.util.comun;

/**
 *
 * @author Jorge
 */
public class PedidoCrearEditar extends javax.swing.JDialog {

    SimpleDateFormat FormatDate = new SimpleDateFormat("MM'/'dd'/'yy");
    SimpleDateFormat FormatTime = new SimpleDateFormat(" hh ':' mm ' ' a ");
    private Date dat;
    private Orden o;
    private List<ProductoVenta> listaProducto;

    /**
     * Creates new form CrearEditarPedido
     */
    private PedidoCrearEditar(java.awt.Dialog parent, boolean modal, Orden o) {
        this(parent, modal, o, new Date());
    }

    private PedidoCrearEditar(java.awt.Dialog parent, boolean modal, Orden o, Date date) {
        super(parent, modal);
        initComponents();
        this.dat = date;
        updateDialog(o);
        setVisible(true);

    }

    private void updateDialog(Orden or) {
        if (or == null) {
            try {
                staticContent.clearCache(Configuracion.class);
                Configuracion c = staticContent.configJPA.findConfiguracion("O");
                o = new Orden("O-" + (c.getValor()));
                c.setValor(c.getValor() + 1);
                staticContent.configJPA.edit(c);
                o.setHoraComenzada(dat);
                o.setPorciento(R.PERCENTAGE);
                o.setOrdenvalorMonetario(Float.parseFloat("0"));
                o.setPersonalusuario(Main.logUser);
                o.setVentafecha(findVentaFecha());

                Mesa m = staticContent.mesasJPA.findMesa("M-0");
                o.setMesacodMesa(m);
                m.setEstado(o.getCodOrden() + " " + o.getPersonalusuario().getUsuario());
                staticContent.mesasJPA.edit(m);
                o.setDeLaCasa(false);
                o.setProductovOrdenList(new ArrayList<>());
                staticContent.ordenJPA.create(o);
            } catch (Exception ex) {
                Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            o = or;
        }

        updatePedido(o);
        updateMenu();
    }

    public static PedidoCrearEditar getInstance(java.awt.Dialog parent, boolean modal, Orden o, Date date) {
        return new PedidoCrearEditar(parent, modal, null, date);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        panelNice1 = new org.edisoncor.gui.panel.PanelNice();
        panelRoundTranslucido1 = new org.edisoncor.gui.panel.PanelRoundTranslucido();
        textFieldBUSCAR = new org.edisoncor.gui.textField.TextFieldRectIcon();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableListaProductos = new javax.swing.JTable();
        jlabelCANTPROD = new org.edisoncor.gui.label.LabelMetric();
        buttonAnnadir = new org.edisoncor.gui.button.ButtonTextDown();
        panelLlamada1 = new org.edisoncor.gui.panel.PanelLlamada();
        jCheckBoxDELACASA = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePedido = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabelVALORFecha = new javax.swing.JLabel();
        jLabelVALORNOORDEN = new javax.swing.JLabel();
        buttonEliminar = new org.edisoncor.gui.button.ButtonTextDown();
        jLabel2 = new javax.swing.JLabel();
        jLabelVALORTotal = new javax.swing.JLabel();
        buttonDespachar = new org.edisoncor.gui.button.ButtonTextDown();
        jLabelVALORUsuario = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelVALORMesa = new javax.swing.JLabel();
        jLabelVALORHora = new javax.swing.JLabel();
        buttonEnviarACocina = new org.edisoncor.gui.button.ButtonTextDown();
        jCheckBoxPorciento = new javax.swing.JCheckBox();
        buttonAddNota = new org.edisoncor.gui.button.ButtonTextDown();
        buttonAddNota1 = new org.edisoncor.gui.button.ButtonTextDown();
        jSpinner1 = new javax.swing.JSpinner();

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0' %'"))));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pedido");
        setMinimumSize(new java.awt.Dimension(769, 478));
        setModal(true);
        setSize(new java.awt.Dimension(400, 645));

        panelNice1.setLayout(new java.awt.GridLayout(1, 2));

        textFieldBUSCAR.setText("Buscar...");
        textFieldBUSCAR.setFont(new java.awt.Font("BlairMdITC TT", 0, 13)); // NOI18N
        textFieldBUSCAR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldBUSCARFocusGained(evt);
            }
        });
        textFieldBUSCAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldBUSCARActionPerformed(evt);
            }
        });
        textFieldBUSCAR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldBUSCARKeyTyped(evt);
            }
        });

        jTableListaProductos.setAutoCreateRowSorter(true);
        jTableListaProductos.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jTableListaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Precio V", "Sección", "Cocina"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableListaProductosMouseClicked(evt);
            }
        });
        jTableListaProductos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableListaProductosPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTableListaProductos);
        if (jTableListaProductos.getColumnModel().getColumnCount() > 0) {
            jTableListaProductos.getColumnModel().getColumn(0).setMinWidth(50);
            jTableListaProductos.getColumnModel().getColumn(0).setMaxWidth(50);
            jTableListaProductos.getColumnModel().getColumn(2).setMinWidth(66);
            jTableListaProductos.getColumnModel().getColumn(2).setMaxWidth(66);
            jTableListaProductos.getColumnModel().getColumn(3).setMinWidth(66);
            jTableListaProductos.getColumnModel().getColumn(3).setMaxWidth(66);
            jTableListaProductos.getColumnModel().getColumn(4).setMinWidth(66);
            jTableListaProductos.getColumnModel().getColumn(4).setMaxWidth(66);
        }

        jlabelCANTPROD.setText("0 Platos");

        buttonAnnadir.setText("Añadir");
        buttonAnnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnnadirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRoundTranslucido1Layout = new javax.swing.GroupLayout(panelRoundTranslucido1);
        panelRoundTranslucido1.setLayout(panelRoundTranslucido1Layout);
        panelRoundTranslucido1Layout.setHorizontalGroup(
            panelRoundTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRoundTranslucido1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jlabelCANTPROD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(textFieldBUSCAR, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(panelRoundTranslucido1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(17, 17, 17))
            .addGroup(panelRoundTranslucido1Layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(buttonAnnadir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(188, 188, 188))
        );
        panelRoundTranslucido1Layout.setVerticalGroup(
            panelRoundTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRoundTranslucido1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelRoundTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabelCANTPROD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldBUSCAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(buttonAnnadir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        panelNice1.add(panelRoundTranslucido1);

        panelLlamada1.setColorPrimario(new java.awt.Color(51, 255, 255));
        panelLlamada1.setColorSecundario(new java.awt.Color(204, 255, 255));

        jCheckBoxDELACASA.setBackground(new java.awt.Color(255, 255, 153));
        jCheckBoxDELACASA.setText("De la Casa");
        jCheckBoxDELACASA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDELACASAActionPerformed(evt);
            }
        });

        jTablePedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Producto", "Cantidad", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePedido.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTablePedidoPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePedido);
        if (jTablePedido.getColumnModel().getColumnCount() > 0) {
            jTablePedido.getColumnModel().getColumn(0).setMinWidth(50);
            jTablePedido.getColumnModel().getColumn(0).setMaxWidth(50);
            jTablePedido.getColumnModel().getColumn(2).setMinWidth(66);
            jTablePedido.getColumnModel().getColumn(2).setMaxWidth(66);
            jTablePedido.getColumnModel().getColumn(3).setMinWidth(50);
            jTablePedido.getColumnModel().getColumn(3).setMaxWidth(50);
        }

        jLabel3.setBackground(new java.awt.Color(153, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Fecha:");

        jLabelVALORFecha.setBackground(new java.awt.Color(153, 255, 255));
        jLabelVALORFecha.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelVALORFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVALORFecha.setText("dd/mm/yy");

        jLabelVALORNOORDEN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelVALORNOORDEN.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelVALORNOORDEN.setText("No: 5534");

        buttonEliminar.setText("Retirar");
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(153, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Total: ");

        jLabelVALORTotal.setBackground(new java.awt.Color(153, 255, 255));
        jLabelVALORTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelVALORTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVALORTotal.setText("0.00 CUC");
        jLabelVALORTotal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        buttonDespachar.setText("Cerrar Mesa");
        buttonDespachar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDespacharActionPerformed(evt);
            }
        });

        jLabelVALORUsuario.setBackground(new java.awt.Color(153, 255, 255));
        jLabelVALORUsuario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelVALORUsuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVALORUsuario.setText("Nombre Apellido");

        jLabel5.setBackground(new java.awt.Color(153, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Dependiente:");

        jLabel6.setBackground(new java.awt.Color(153, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Mesa:");

        jLabelVALORMesa.setBackground(new java.awt.Color(153, 255, 255));
        jLabelVALORMesa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelVALORMesa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVALORMesa.setText("M-xx");

        jLabelVALORHora.setBackground(new java.awt.Color(153, 255, 255));
        jLabelVALORHora.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelVALORHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVALORHora.setText("hh:mm");

        buttonEnviarACocina.setText("Enviar a Cocina");
        buttonEnviarACocina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnviarACocinaActionPerformed(evt);
            }
        });

        jCheckBoxPorciento.setBackground(new java.awt.Color(255, 255, 153));
        jCheckBoxPorciento.setText("Añadir Porciento");
        jCheckBoxPorciento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPorcientoActionPerformed(evt);
            }
        });

        buttonAddNota.setText("Agregar Nota");
        buttonAddNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddNotaActionPerformed(evt);
            }
        });

        buttonAddNota1.setText("Imprimir Cuenta");
        buttonAddNota1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddNota1ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(10.0f), Float.valueOf(-100.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelLlamada1Layout = new javax.swing.GroupLayout(panelLlamada1);
        panelLlamada1.setLayout(panelLlamada1Layout);
        panelLlamada1Layout.setHorizontalGroup(
            panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLlamada1Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLlamada1Layout.createSequentialGroup()
                        .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLlamada1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelVALORFecha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelVALORHora))
                            .addGroup(panelLlamada1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelVALORUsuario)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelLlamada1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelVALORMesa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelVALORNOORDEN)
                        .addGap(54, 54, 54))))
            .addGroup(panelLlamada1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLlamada1Layout.createSequentialGroup()
                        .addComponent(jCheckBoxPorciento)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxDELACASA))
                    .addComponent(jScrollPane1)
                    .addGroup(panelLlamada1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(67, 67, 67)
                        .addComponent(jLabelVALORTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelLlamada1Layout.createSequentialGroup()
                        .addComponent(buttonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(buttonAddNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(9, 9, 9))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLlamada1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(buttonEnviarACocina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonAddNota1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDespachar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );
        panelLlamada1Layout.setVerticalGroup(
            panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLlamada1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelVALORFecha)
                    .addComponent(jLabelVALORHora))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelVALORUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabelVALORMesa)
                    .addComponent(jLabelVALORNOORDEN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxDELACASA)
                    .addComponent(jCheckBoxPorciento)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelVALORTotal)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAddNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAddNota1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLlamada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDespachar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEnviarACocina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        panelNice1.add(panelLlamada1);

        getContentPane().add(panelNice1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldBUSCARFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldBUSCARFocusGained
        textFieldBUSCAR.setText("");
        textFieldBUSCAR.setCaretPosition(0);
    }//GEN-LAST:event_textFieldBUSCARFocusGained

    private void textFieldBUSCARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldBUSCARActionPerformed

    }//GEN-LAST:event_textFieldBUSCARActionPerformed

    private void textFieldBUSCARKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldBUSCARKeyTyped
        String aux = textFieldBUSCAR.getText();
        DefaultTableModel model = (DefaultTableModel) jTableListaProductos.getModel();
        comun.limpiarTabla(jTableListaProductos);
        listaProducto.forEach((ProductoVenta p) -> {
            Object[] row = {
                p.getPCod(),
                p.getNombre(),
                p.getPrecioVenta(),
                p.getSeccionnombreSeccion().getNombreSeccion(),
                p.getCocinacodCocina().getNombreCocina(),};
            if (p.getNombre().toLowerCase().contains(aux.toLowerCase())) {
                model.addRow(row);
            }
        });
    }//GEN-LAST:event_textFieldBUSCARKeyTyped

    private void jTableListaProductosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableListaProductosPropertyChange

    }//GEN-LAST:event_jTableListaProductosPropertyChange

    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed
        retirarProducto();
    }//GEN-LAST:event_buttonEliminarActionPerformed

    private void jCheckBoxDELACASAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDELACASAActionPerformed
        setdelacasa();
    }//GEN-LAST:event_jCheckBoxDELACASAActionPerformed

    private void buttonEnviarACocinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnviarACocinaActionPerformed
        enviarACocina();
    }//GEN-LAST:event_buttonEnviarACocinaActionPerformed

    private void buttonDespacharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDespacharActionPerformed
        despachar();
    }//GEN-LAST:event_buttonDespacharActionPerformed

    private void buttonAnnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnnadirActionPerformed
        añadir();
    }//GEN-LAST:event_buttonAnnadirActionPerformed

    private void jTablePedidoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTablePedidoPropertyChange
        if (evt.getPropertyName().matches("tableCellEditor")) {
            if (jTablePedido.getEditingRow() != -1) {
                updateTablePedidos();
            }
        }
    }//GEN-LAST:event_jTablePedidoPropertyChange

    private void jTableListaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListaProductosMouseClicked

        if (evt.getClickCount() == 2) {
            if (jTableListaProductos.getSelectedRow() != -1) {
                añadir();
            }
        }

    }//GEN-LAST:event_jTableListaProductosMouseClicked

    private void jCheckBoxPorcientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPorcientoActionPerformed
        addPorcientoToOrden(jCheckBoxPorciento.isSelected());
    }//GEN-LAST:event_jCheckBoxPorcientoActionPerformed

    private void buttonAddNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddNotaActionPerformed
        agregarNota();
    }//GEN-LAST:event_buttonAddNotaActionPerformed

    private void buttonAddNota1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddNota1ActionPerformed
        imprimir_pre_ticket();
    }//GEN-LAST:event_buttonAddNota1ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        addPorcientoToOrden(true);
    }//GEN-LAST:event_jSpinner1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonTextDown buttonAddNota;
    private org.edisoncor.gui.button.ButtonTextDown buttonAddNota1;
    private org.edisoncor.gui.button.ButtonTextDown buttonAnnadir;
    private org.edisoncor.gui.button.ButtonTextDown buttonDespachar;
    private org.edisoncor.gui.button.ButtonTextDown buttonEliminar;
    private org.edisoncor.gui.button.ButtonTextDown buttonEnviarACocina;
    private javax.swing.JCheckBox jCheckBoxDELACASA;
    private javax.swing.JCheckBox jCheckBoxPorciento;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelVALORFecha;
    private javax.swing.JLabel jLabelVALORHora;
    private javax.swing.JLabel jLabelVALORMesa;
    private javax.swing.JLabel jLabelVALORNOORDEN;
    private javax.swing.JLabel jLabelVALORTotal;
    private javax.swing.JLabel jLabelVALORUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTableListaProductos;
    private javax.swing.JTable jTablePedido;
    private org.edisoncor.gui.label.LabelMetric jlabelCANTPROD;
    private org.edisoncor.gui.panel.PanelLlamada panelLlamada1;
    private org.edisoncor.gui.panel.PanelNice panelNice1;
    private org.edisoncor.gui.panel.PanelRoundTranslucido panelRoundTranslucido1;
    private org.edisoncor.gui.textField.TextFieldRectIcon textFieldBUSCAR;
    // End of variables declaration//GEN-END:variables

    /**
     * llena el dialogo con la información
     */
    private void updateMenu() {
        listaProducto = staticContent.productoJPA.findProductoVentaEntities();

        for (int i = 0; i < listaProducto.size();) {
            if (!listaProducto.get(i).getVisible()) {
                listaProducto.remove(i);
            } else {
                i++;
            }
        }
        ArrayList[] rowdata = comun.initArray(new ArrayList[5]);

        for (ProductoVenta x : listaProducto) {
            if (x.getVisible()) {
                rowdata[0].add(x.getPCod());
                rowdata[1].add(x.getNombre());
                rowdata[2].add(x.getPrecioVenta());
                rowdata[3].add(x.getSeccionnombreSeccion().getNombreSeccion());
                rowdata[4].add(x.getCocinacodCocina().getCodCocina());
            }
        }

        try {
            comun.UpdateTable(rowdata, jTableListaProductos);
            jlabelCANTPROD.setText("" + rowdata[0].size() + " Platos");
        } catch (Exception ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updatePedido(Orden or) {
        jLabelVALORFecha.setText(FormatDate.format(or.getVentafecha().getFecha()));
        jLabelVALORHora.setText(FormatTime.format(or.getHoraComenzada()));
        jLabelVALORMesa.setText(or.getMesacodMesa().getCodMesa());
        jLabelVALORNOORDEN.setText("No : " + or.getCodOrden());
        jLabelVALORUsuario.setText(or.getPersonalusuario().getUsuario());
        jCheckBoxDELACASA.setSelected(or.getDeLaCasa());
        jCheckBoxPorciento.setSelected(or.getPorciento() != 0);
        jSpinner1.setValue(or.getPorciento());

        ArrayList[] rowdata = comun.initArray(new ArrayList[4]);
        for (ProductovOrden x : or.getProductovOrdenList()) {
            rowdata[0].add(x.getProductoVenta().getPCod());
            rowdata[1].add(x.getProductoVenta().getNombre());
            rowdata[2].add(x.getCantidad());
            rowdata[3].add(x.getCantidad() * x.getProductoVenta().getPrecioVenta());

        }

        try {
            comun.UpdateTable(rowdata, jTablePedido);
        } catch (Exception ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
        ActValorT();
    }

    private void enviarACocina() {
        Impresion i = new Impresion(staticContent.cartaJPA.findCarta("Mnu-1"));
        try {
            o = i.printKitchen(o);
            staticContent.ordenJPA.edit(o);
        } catch (PrintException ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void despachar() {
        int respuesta = JOptionPane.showConfirmDialog(this, "Desea cerrar la orden " + o.getCodOrden());
        if (respuesta == JOptionPane.YES_OPTION) {
            boolean enviar = true;
            for (ProductovOrden x : o.getProductovOrdenList()) {
                if (x.getCantidad() > x.getEnviadosacocina()) {
                    enviar = false;
                }
            }
            if (!enviar) {
                JOptionPane.showMessageDialog(this,
                        "Existen productos que no han sido enviados a cocina. Envie a cocina antes de cerrar la orden");
                return;
            } else {
                int imprimirTIcket = JOptionPane.showConfirmDialog(this, "Desea imprimir un ticket de la orden");
                if (imprimirTIcket == JOptionPane.YES_OPTION) {
                    Impresion i = new Impresion(staticContent.cartaJPA.findCarta("Mnu-1"));
                    try {
                        i.print(o, false);
                    } catch (PrintException ex) {
                        Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                try {

                    o.setHoraTerminada(new Date());
                    o.setOrdenvalorMonetario(getValorT());
                    o.setOrdengastoEninsumos(getGastosInsumos(o));

                    Mesa m = staticContent.mesasJPA.findMesa(o.getMesacodMesa().getCodMesa());
                    m.setEstado("vacia");
                    o.setMesacodMesa(m);
                    staticContent.ordenJPA.edit(o);
                    staticContent.mesasJPA.edit(m);

                    dispose();
                    return;
                } catch (Exception ex) {
                    Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Operacion cancelada");
            return;
        }

    }

    private void añadir() {
        int row = jTableListaProductos.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "No Hay ninguna fila seleccionada");
        } else {
            String cod = (String) jTableListaProductos.getValueAt(row, 0);
            ProductoVenta p = staticContent.productoJPA.findProductoVenta(cod);
            añadiraTabla(p);

        }

    }

    public void ActValorT() {
        jLabelVALORTotal.setText(String.valueOf(getValorT()) + Main.moneda);
    }

    private float getValorT() {
        float valor = 0;
        for (int i = 0; i < jTablePedido.getRowCount(); i++) {
            valor += (float) (jTablePedido.getValueAt(i, 3));
        }
        if (o.getPorciento() != 0) {
            if (!o.getDeLaCasa()) {
                valor += (o.getPorciento() / 100) * valor;
            }
        }

        o.setOrdenvalorMonetario(valor);
        try {
            staticContent.ordenJPA.edit(o);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
        return valor;
    }

    private void retirarProducto() {
        int row = jTablePedido.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "No Hay ninguna fila seleccionada");
        } else {
            String cod = (String) jTablePedido.getValueAt(row, 0);
            ProductoVenta p = staticContent.productoJPA.findProductoVenta(cod);
            retirarDeTabla(p);

        }
    }

    private void añadiraTabla(ProductoVenta p) {
        boolean found = false;
        for (int i = 0; i < jTablePedido.getRowCount() && !found; i++) {
            if (jTablePedido.getValueAt(i, 0).equals(p.getPCod())) {
                found = true;
                int cant = (int) jTablePedido.getValueAt(i, 2);
                float precio = (float) jTablePedido.getValueAt(i, 3);
                cant++;
                precio += p.getPrecioVenta();
                jTablePedido.setValueAt(cant, i, 2);
                jTablePedido.setValueAt(precio, i, 3);
                o.getProductovOrdenList().get(i).setCantidad(cant);
                try {
                    staticContent.productovOrdenJpa.edit(o.getProductovOrdenList().get(i));
                    staticContent.ordenJPA.edit(o);
                } catch (Exception ex) {
                    Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (!found) {
            Object[] rowdata = new Object[4];
            rowdata[0] = p.getPCod();
            rowdata[1] = (p.getNombre());
            rowdata[2] = (1);
            rowdata[3] = (p.getPrecioVenta());
            try {
                comun.addToTable(jTablePedido, rowdata);
            } catch (Exception ex) {
                Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
            }

            ProductovOrden po = new ProductovOrden(p.getPCod(), o.getCodOrden());
            po.setOrden(o);
            po.setProductoVenta(p);
            po.setCantidad(1);
            po.setEnviadosacocina(0);
            po.setNumeroComensal(0);

            o.getProductovOrdenList().add(po);
            try {
                staticContent.productovOrdenJpa.create(po);
                staticContent.ordenJPA.edit(o);
            } catch (Exception ex) {
                Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        ActValorT();

    }

    private void retirarDeTabla(ProductoVenta p) {//TODO: a la hora de eliminar productos que ya fueron pasados a cocina es necesario imprimir un ticket de eliminacion
        boolean found = false;
        for (int i = 0; i < jTablePedido.getRowCount() && !found; i++) {
            if (jTablePedido.getValueAt(i, 0).equals(p.getPCod())) {
                if ((int) jTablePedido.getValueAt(i, 2) > 1) {
                    found = true;
                    int cant = (int) jTablePedido.getValueAt(i, 2);
                    float precio = (float) jTablePedido.getValueAt(i, 3);
                    cant--;
                    precio -= p.getPrecioVenta();
                    jTablePedido.setValueAt(cant, i, 2);
                    jTablePedido.setValueAt(precio, i, 3);
                    o.getProductovOrdenList().get(i).setCantidad(cant);
                    try {
                        staticContent.productovOrdenJpa.edit(o.getProductovOrdenList().get(i));
                        staticContent.ordenJPA.edit(o);
                    } catch (Exception ex) {
                        Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    comun.removeFromTable(jTablePedido, i);

                    try {
                        staticContent.productovOrdenJpa.destroy(o.getProductovOrdenList().get(i).getProductovOrdenPK());
                        o.getProductovOrdenList().remove(i);
                        staticContent.ordenJPA.edit(o);
                    } catch (NonexistentEntityException ex) {
                        Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        }
        ActValorT();

    }

    private void updateTablePedidos() {
        int row = jTablePedido.getSelectedRow();
        int cant = (int) jTablePedido.getValueAt(row, 2);
        String cod = (String) jTablePedido.getValueAt(row, 0);
        for (ProductovOrden x : o.getProductovOrdenList()) {
            if (x.getProductoVenta().getPCod().equals(cod)) {
                x.setCantidad(cant);
                jTablePedido.setValueAt(cant * x.getProductoVenta().getPrecioVenta(), row, 3);
                try {
                    staticContent.productovOrdenJpa.edit(x);
                } catch (Exception ex) {
                    Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }

        }
        ActValorT();

    }

    private void addPorcientoToOrden(boolean selected) {
        if (selected) {
            try {
                float porciento = (float) jSpinner1.getValue();
                o.setPorciento(porciento);
                ActValorT();

            } catch (Exception e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, "Valor de porciento incorrecto");
            }
        } else {
            o.setPorciento(Float.valueOf("0"));
            ActValorT();
        }

    }

    private void agregarNota() {
        int selected = jTablePedido.getSelectedRow();
        String pCod = (String) jTablePedido.getValueAt(selected, 0);
        if (selected == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila del pedido para crear una nota");
            return;
        }
        String notaAntigua = null;

        try {
            for (int i = 0; i < o.getProductovOrdenList().size(); i++) {
                if (o.getProductovOrdenList().get(i).getProductoVenta().getPCod().equals(pCod)) {
                    Nota nota = o.getProductovOrdenList().get(i).getNota();
                    if (nota == null) {
                        String nuevanota = JOptionPane.showInputDialog("Introduzca la nota a adjuntar");
                        Configuracion c = staticContent.configJPA.findConfiguracion("N");

                        NotaPK pk = new NotaPK(
                                o.getProductovOrdenList().get(i).getProductovOrdenPK().getProductoVentapCod(),
                                o.getProductovOrdenList().get(i).getProductovOrdenPK().getOrdencodOrden());
                        Nota n = new Nota(pk);
                        n.setDescripcion(nuevanota);
                        n.setProductovOrden(o.getProductovOrdenList().get(i));

                        o.getProductovOrdenList().get(i).setNota(n);
                        //c.setValor(c.getValor()+1);
                        //staticContent.configJPA.edit(c);
                        staticContent.notaJPA.create(n);
                        staticContent.productovOrdenJpa.edit(o.getProductovOrdenList().get(i));
                    } else {
                        notaAntigua = nota.getDescripcion();
                        String nuevaNota = JOptionPane.showInputDialog("Edite la nota anterior", notaAntigua);
                        nota.setDescripcion(nuevaNota);
                        staticContent.notaJPA.edit(nota);
                    }

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }

    private void imprimir_pre_ticket() {
        Impresion i = new Impresion(staticContent.cartaJPA.findCarta("Mnu-1"));
        try {
            i.print(o, true);
        } catch (PrintException ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private Float getGastosInsumos(Orden o) {
        float ret = 0;
        for (ProductovOrden x : o.getProductovOrdenList()) {
            ret += x.getProductoVenta().getGasto() * x.getCantidad();
        }

        return ret;
    }

    private Venta findVentaFecha() {
        Venta ret = staticContent.ventaJPA.findVenta(new Date());

        if (ret == null) {
            for (Venta v : staticContent.ventaJPA.findVentaEntities()) {
                if (v.getVentaTotal() == null) {
                    return v;
                }
            }
        }

        return ret;

    }

    private void setdelacasa() {
        try {
            o.setDeLaCasa(jCheckBoxDELACASA.isSelected());
            staticContent.ordenJPA.edit(o);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PedidoCrearEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.Views.login.Main;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import restManager.persistencia.Cocina;
import restManager.persistencia.Insumo;
import restManager.persistencia.Ipv;
import restManager.persistencia.IpvPK;
import restManager.persistencia.jpa.staticContent;
import restManager.persistencia.models.InsumoDAO;

import restManager.util.comun;

/**
 *
 * @author Jorge
 */
public class IPVVista extends javax.swing.JPanel {

    /**
     * Creates new form VistaIPV
     */
    private Cocina c;

    public IPVVista(Cocina c) {
        this.c = c;
        initComponents();
        updateDialog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaVistaIPV = new org.jdesktop.swingx.JXTable();

        setMinimumSize(new java.awt.Dimension(600, 600));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 600));

        TablaVistaIPV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Insumo", "Incluir"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaVistaIPV.setMinimumSize(new java.awt.Dimension(600, 600));
        TablaVistaIPV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaVistaIPVMouseClicked(evt);
            }
        });
        TablaVistaIPV.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablaVistaIPVPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(TablaVistaIPV);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void TablaVistaIPVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaVistaIPVMouseClicked

    }//GEN-LAST:event_TablaVistaIPVMouseClicked

    private void TablaVistaIPVPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablaVistaIPVPropertyChange
        if (evt.getPropertyName().equals("tableCellEditor")) {
            if (evt.getNewValue() == null) {
                if (Main.NIVEL_4) {

                    updateTableEditing();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "No tiene permisos para editar", "Permiso denegado",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }

        }

    }//GEN-LAST:event_TablaVistaIPVPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTable TablaVistaIPV;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void updateDialog() {

        if (c == null) {
            throw new AssertionError("La cocina pasada por parametro no puede ser nula");
        }

        ArrayList[] rowData = comun.initArray(new ArrayList[3]);

        List<Insumo> insumos = InsumoDAO.getInstance().findAll();
        for (Insumo i : insumos) {
            rowData[0].add(i.getCodInsumo());
            rowData[1].add(i.getNombre());
            boolean founded = false;
            for (Ipv x : c.getIpvList()) {
                if (x.getIpvPK().
                        getInsumocodInsumo().equals(i.getCodInsumo())) {
                    founded = true;
                    break;
                }
            }
            rowData[2].add(founded);
        }

        try {
            comun.UpdateTable(rowData, TablaVistaIPV);
        } catch (Exception ex) {
            Logger.getLogger(IPVVista.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updateTableEditing() {

        int column = 2;
        int row = TablaVistaIPV.getEditingRow();
        String cod = (String) TablaVistaIPV.getValueAt(row, 0);
        boolean value = (boolean) TablaVistaIPV.getValueAt(row, column);
        Insumo i = InsumoDAO.getInstance().find(cod);
        IpvPK pk = new IpvPK(cod, c.getCodCocina());
        try {
            if (value) {
                Ipv newIPV = new Ipv(pk);
                newIPV.setCocina(c);
                newIPV.setInsumo(i);
                staticContent.ipvJPA.create(newIPV);

            } else {
                staticContent.ipvJPA.destroy(pk);
            }
        } catch (Exception ex) {
            Logger.getLogger(IPVVista.class.getName()).log(Level.SEVERE, null, ex);

        }

    }
}
